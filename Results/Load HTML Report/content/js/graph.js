/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 519.0, "minX": 0.0, "maxY": 7097.0, "series": [{"data": [[0.0, 519.0], [0.1, 522.0], [0.2, 523.0], [0.3, 523.0], [0.4, 524.0], [0.5, 524.0], [0.6, 525.0], [0.7, 525.0], [0.8, 525.0], [0.9, 526.0], [1.0, 526.0], [1.1, 527.0], [1.2, 527.0], [1.3, 527.0], [1.4, 528.0], [1.5, 528.0], [1.6, 528.0], [1.7, 529.0], [1.8, 529.0], [1.9, 529.0], [2.0, 530.0], [2.1, 530.0], [2.2, 530.0], [2.3, 531.0], [2.4, 531.0], [2.5, 531.0], [2.6, 532.0], [2.7, 532.0], [2.8, 533.0], [2.9, 533.0], [3.0, 533.0], [3.1, 534.0], [3.2, 534.0], [3.3, 534.0], [3.4, 534.0], [3.5, 535.0], [3.6, 535.0], [3.7, 536.0], [3.8, 537.0], [3.9, 537.0], [4.0, 537.0], [4.1, 537.0], [4.2, 538.0], [4.3, 538.0], [4.4, 539.0], [4.5, 539.0], [4.6, 540.0], [4.7, 540.0], [4.8, 541.0], [4.9, 541.0], [5.0, 542.0], [5.1, 542.0], [5.2, 543.0], [5.3, 543.0], [5.4, 543.0], [5.5, 544.0], [5.6, 544.0], [5.7, 545.0], [5.8, 545.0], [5.9, 546.0], [6.0, 546.0], [6.1, 547.0], [6.2, 547.0], [6.3, 548.0], [6.4, 549.0], [6.5, 549.0], [6.6, 549.0], [6.7, 550.0], [6.8, 550.0], [6.9, 551.0], [7.0, 551.0], [7.1, 552.0], [7.2, 553.0], [7.3, 553.0], [7.4, 554.0], [7.5, 554.0], [7.6, 554.0], [7.7, 555.0], [7.8, 555.0], [7.9, 556.0], [8.0, 556.0], [8.1, 557.0], [8.2, 558.0], [8.3, 558.0], [8.4, 559.0], [8.5, 559.0], [8.6, 560.0], [8.7, 561.0], [8.8, 562.0], [8.9, 562.0], [9.0, 563.0], [9.1, 564.0], [9.2, 564.0], [9.3, 565.0], [9.4, 566.0], [9.5, 567.0], [9.6, 567.0], [9.7, 568.0], [9.8, 569.0], [9.9, 569.0], [10.0, 570.0], [10.1, 571.0], [10.2, 572.0], [10.3, 572.0], [10.4, 573.0], [10.5, 574.0], [10.6, 575.0], [10.7, 575.0], [10.8, 576.0], [10.9, 577.0], [11.0, 578.0], [11.1, 579.0], [11.2, 580.0], [11.3, 581.0], [11.4, 582.0], [11.5, 583.0], [11.6, 584.0], [11.7, 585.0], [11.8, 586.0], [11.9, 587.0], [12.0, 588.0], [12.1, 589.0], [12.2, 590.0], [12.3, 591.0], [12.4, 593.0], [12.5, 594.0], [12.6, 596.0], [12.7, 598.0], [12.8, 599.0], [12.9, 599.0], [13.0, 600.0], [13.1, 601.0], [13.2, 602.0], [13.3, 604.0], [13.4, 605.0], [13.5, 606.0], [13.6, 606.0], [13.7, 608.0], [13.8, 609.0], [13.9, 610.0], [14.0, 611.0], [14.1, 612.0], [14.2, 613.0], [14.3, 614.0], [14.4, 616.0], [14.5, 617.0], [14.6, 618.0], [14.7, 619.0], [14.8, 620.0], [14.9, 622.0], [15.0, 623.0], [15.1, 624.0], [15.2, 626.0], [15.3, 627.0], [15.4, 627.0], [15.5, 628.0], [15.6, 629.0], [15.7, 630.0], [15.8, 632.0], [15.9, 634.0], [16.0, 635.0], [16.1, 636.0], [16.2, 637.0], [16.3, 638.0], [16.4, 639.0], [16.5, 641.0], [16.6, 642.0], [16.7, 643.0], [16.8, 644.0], [16.9, 644.0], [17.0, 645.0], [17.1, 646.0], [17.2, 646.0], [17.3, 648.0], [17.4, 648.0], [17.5, 649.0], [17.6, 651.0], [17.7, 651.0], [17.8, 652.0], [17.9, 653.0], [18.0, 654.0], [18.1, 655.0], [18.2, 655.0], [18.3, 657.0], [18.4, 658.0], [18.5, 659.0], [18.6, 660.0], [18.7, 661.0], [18.8, 663.0], [18.9, 663.0], [19.0, 664.0], [19.1, 666.0], [19.2, 666.0], [19.3, 667.0], [19.4, 667.0], [19.5, 669.0], [19.6, 669.0], [19.7, 669.0], [19.8, 670.0], [19.9, 671.0], [20.0, 672.0], [20.1, 672.0], [20.2, 674.0], [20.3, 675.0], [20.4, 676.0], [20.5, 677.0], [20.6, 677.0], [20.7, 678.0], [20.8, 679.0], [20.9, 680.0], [21.0, 681.0], [21.1, 681.0], [21.2, 682.0], [21.3, 683.0], [21.4, 683.0], [21.5, 684.0], [21.6, 685.0], [21.7, 685.0], [21.8, 686.0], [21.9, 687.0], [22.0, 688.0], [22.1, 688.0], [22.2, 690.0], [22.3, 691.0], [22.4, 692.0], [22.5, 693.0], [22.6, 693.0], [22.7, 694.0], [22.8, 695.0], [22.9, 696.0], [23.0, 696.0], [23.1, 697.0], [23.2, 698.0], [23.3, 699.0], [23.4, 699.0], [23.5, 700.0], [23.6, 701.0], [23.7, 702.0], [23.8, 703.0], [23.9, 703.0], [24.0, 704.0], [24.1, 705.0], [24.2, 706.0], [24.3, 707.0], [24.4, 708.0], [24.5, 708.0], [24.6, 709.0], [24.7, 710.0], [24.8, 711.0], [24.9, 712.0], [25.0, 713.0], [25.1, 714.0], [25.2, 715.0], [25.3, 716.0], [25.4, 717.0], [25.5, 718.0], [25.6, 719.0], [25.7, 721.0], [25.8, 722.0], [25.9, 723.0], [26.0, 724.0], [26.1, 724.0], [26.2, 726.0], [26.3, 726.0], [26.4, 728.0], [26.5, 729.0], [26.6, 730.0], [26.7, 731.0], [26.8, 733.0], [26.9, 734.0], [27.0, 736.0], [27.1, 736.0], [27.2, 738.0], [27.3, 740.0], [27.4, 741.0], [27.5, 743.0], [27.6, 743.0], [27.7, 745.0], [27.8, 747.0], [27.9, 747.0], [28.0, 748.0], [28.1, 750.0], [28.2, 751.0], [28.3, 753.0], [28.4, 755.0], [28.5, 756.0], [28.6, 757.0], [28.7, 760.0], [28.8, 762.0], [28.9, 764.0], [29.0, 766.0], [29.1, 768.0], [29.2, 771.0], [29.3, 773.0], [29.4, 775.0], [29.5, 777.0], [29.6, 781.0], [29.7, 782.0], [29.8, 784.0], [29.9, 786.0], [30.0, 789.0], [30.1, 796.0], [30.2, 800.0], [30.3, 802.0], [30.4, 808.0], [30.5, 813.0], [30.6, 825.0], [30.7, 833.0], [30.8, 845.0], [30.9, 856.0], [31.0, 868.0], [31.1, 880.0], [31.2, 891.0], [31.3, 907.0], [31.4, 917.0], [31.5, 927.0], [31.6, 936.0], [31.7, 942.0], [31.8, 948.0], [31.9, 953.0], [32.0, 958.0], [32.1, 962.0], [32.2, 965.0], [32.3, 966.0], [32.4, 968.0], [32.5, 971.0], [32.6, 973.0], [32.7, 976.0], [32.8, 977.0], [32.9, 978.0], [33.0, 979.0], [33.1, 982.0], [33.2, 982.0], [33.3, 984.0], [33.4, 985.0], [33.5, 986.0], [33.6, 988.0], [33.7, 989.0], [33.8, 990.0], [33.9, 992.0], [34.0, 993.0], [34.1, 994.0], [34.2, 995.0], [34.3, 996.0], [34.4, 996.0], [34.5, 998.0], [34.6, 998.0], [34.7, 999.0], [34.8, 1000.0], [34.9, 1001.0], [35.0, 1003.0], [35.1, 1004.0], [35.2, 1004.0], [35.3, 1006.0], [35.4, 1007.0], [35.5, 1008.0], [35.6, 1008.0], [35.7, 1009.0], [35.8, 1011.0], [35.9, 1012.0], [36.0, 1013.0], [36.1, 1014.0], [36.2, 1015.0], [36.3, 1016.0], [36.4, 1017.0], [36.5, 1018.0], [36.6, 1019.0], [36.7, 1020.0], [36.8, 1021.0], [36.9, 1022.0], [37.0, 1023.0], [37.1, 1024.0], [37.2, 1025.0], [37.3, 1026.0], [37.4, 1026.0], [37.5, 1027.0], [37.6, 1027.0], [37.7, 1029.0], [37.8, 1029.0], [37.9, 1030.0], [38.0, 1030.0], [38.1, 1031.0], [38.2, 1032.0], [38.3, 1032.0], [38.4, 1033.0], [38.5, 1033.0], [38.6, 1034.0], [38.7, 1035.0], [38.8, 1036.0], [38.9, 1036.0], [39.0, 1037.0], [39.1, 1038.0], [39.2, 1039.0], [39.3, 1040.0], [39.4, 1041.0], [39.5, 1041.0], [39.6, 1042.0], [39.7, 1043.0], [39.8, 1043.0], [39.9, 1044.0], [40.0, 1045.0], [40.1, 1045.0], [40.2, 1046.0], [40.3, 1046.0], [40.4, 1047.0], [40.5, 1048.0], [40.6, 1048.0], [40.7, 1049.0], [40.8, 1049.0], [40.9, 1050.0], [41.0, 1050.0], [41.1, 1051.0], [41.2, 1051.0], [41.3, 1053.0], [41.4, 1053.0], [41.5, 1053.0], [41.6, 1054.0], [41.7, 1054.0], [41.8, 1055.0], [41.9, 1056.0], [42.0, 1056.0], [42.1, 1057.0], [42.2, 1058.0], [42.3, 1059.0], [42.4, 1059.0], [42.5, 1060.0], [42.6, 1060.0], [42.7, 1061.0], [42.8, 1062.0], [42.9, 1062.0], [43.0, 1063.0], [43.1, 1063.0], [43.2, 1064.0], [43.3, 1064.0], [43.4, 1065.0], [43.5, 1066.0], [43.6, 1066.0], [43.7, 1067.0], [43.8, 1068.0], [43.9, 1068.0], [44.0, 1069.0], [44.1, 1069.0], [44.2, 1070.0], [44.3, 1070.0], [44.4, 1071.0], [44.5, 1072.0], [44.6, 1072.0], [44.7, 1072.0], [44.8, 1073.0], [44.9, 1074.0], [45.0, 1074.0], [45.1, 1075.0], [45.2, 1076.0], [45.3, 1077.0], [45.4, 1078.0], [45.5, 1079.0], [45.6, 1080.0], [45.7, 1081.0], [45.8, 1082.0], [45.9, 1083.0], [46.0, 1084.0], [46.1, 1085.0], [46.2, 1085.0], [46.3, 1086.0], [46.4, 1087.0], [46.5, 1088.0], [46.6, 1088.0], [46.7, 1089.0], [46.8, 1090.0], [46.9, 1091.0], [47.0, 1091.0], [47.1, 1092.0], [47.2, 1092.0], [47.3, 1094.0], [47.4, 1095.0], [47.5, 1096.0], [47.6, 1097.0], [47.7, 1099.0], [47.8, 1101.0], [47.9, 1102.0], [48.0, 1103.0], [48.1, 1105.0], [48.2, 1106.0], [48.3, 1107.0], [48.4, 1108.0], [48.5, 1110.0], [48.6, 1112.0], [48.7, 1114.0], [48.8, 1117.0], [48.9, 1119.0], [49.0, 1120.0], [49.1, 1122.0], [49.2, 1124.0], [49.3, 1126.0], [49.4, 1129.0], [49.5, 1135.0], [49.6, 1137.0], [49.7, 1141.0], [49.8, 1145.0], [49.9, 1153.0], [50.0, 1156.0], [50.1, 1161.0], [50.2, 1168.0], [50.3, 1176.0], [50.4, 1194.0], [50.5, 1209.0], [50.6, 1232.0], [50.7, 1265.0], [50.8, 1284.0], [50.9, 1307.0], [51.0, 1319.0], [51.1, 1326.0], [51.2, 1329.0], [51.3, 1333.0], [51.4, 1336.0], [51.5, 1340.0], [51.6, 1342.0], [51.7, 1343.0], [51.8, 1346.0], [51.9, 1348.0], [52.0, 1348.0], [52.1, 1350.0], [52.2, 1351.0], [52.3, 1352.0], [52.4, 1354.0], [52.5, 1354.0], [52.6, 1355.0], [52.7, 1356.0], [52.8, 1357.0], [52.9, 1358.0], [53.0, 1358.0], [53.1, 1359.0], [53.2, 1360.0], [53.3, 1360.0], [53.4, 1361.0], [53.5, 1362.0], [53.6, 1362.0], [53.7, 1363.0], [53.8, 1364.0], [53.9, 1364.0], [54.0, 1365.0], [54.1, 1365.0], [54.2, 1366.0], [54.3, 1366.0], [54.4, 1367.0], [54.5, 1367.0], [54.6, 1368.0], [54.7, 1369.0], [54.8, 1369.0], [54.9, 1369.0], [55.0, 1370.0], [55.1, 1370.0], [55.2, 1371.0], [55.3, 1371.0], [55.4, 1372.0], [55.5, 1372.0], [55.6, 1373.0], [55.7, 1373.0], [55.8, 1373.0], [55.9, 1374.0], [56.0, 1374.0], [56.1, 1375.0], [56.2, 1375.0], [56.3, 1375.0], [56.4, 1376.0], [56.5, 1376.0], [56.6, 1377.0], [56.7, 1377.0], [56.8, 1378.0], [56.9, 1378.0], [57.0, 1379.0], [57.1, 1379.0], [57.2, 1380.0], [57.3, 1380.0], [57.4, 1380.0], [57.5, 1381.0], [57.6, 1381.0], [57.7, 1382.0], [57.8, 1382.0], [57.9, 1382.0], [58.0, 1383.0], [58.1, 1383.0], [58.2, 1383.0], [58.3, 1384.0], [58.4, 1384.0], [58.5, 1384.0], [58.6, 1385.0], [58.7, 1385.0], [58.8, 1386.0], [58.9, 1386.0], [59.0, 1386.0], [59.1, 1386.0], [59.2, 1387.0], [59.3, 1387.0], [59.4, 1387.0], [59.5, 1388.0], [59.6, 1388.0], [59.7, 1388.0], [59.8, 1388.0], [59.9, 1388.0], [60.0, 1389.0], [60.1, 1389.0], [60.2, 1389.0], [60.3, 1390.0], [60.4, 1390.0], [60.5, 1390.0], [60.6, 1391.0], [60.7, 1391.0], [60.8, 1391.0], [60.9, 1392.0], [61.0, 1392.0], [61.1, 1392.0], [61.2, 1392.0], [61.3, 1393.0], [61.4, 1393.0], [61.5, 1393.0], [61.6, 1393.0], [61.7, 1394.0], [61.8, 1394.0], [61.9, 1394.0], [62.0, 1395.0], [62.1, 1395.0], [62.2, 1395.0], [62.3, 1396.0], [62.4, 1396.0], [62.5, 1396.0], [62.6, 1396.0], [62.7, 1397.0], [62.8, 1397.0], [62.9, 1397.0], [63.0, 1397.0], [63.1, 1398.0], [63.2, 1398.0], [63.3, 1398.0], [63.4, 1398.0], [63.5, 1399.0], [63.6, 1399.0], [63.7, 1399.0], [63.8, 1399.0], [63.9, 1400.0], [64.0, 1400.0], [64.1, 1400.0], [64.2, 1400.0], [64.3, 1400.0], [64.4, 1401.0], [64.5, 1401.0], [64.6, 1401.0], [64.7, 1402.0], [64.8, 1402.0], [64.9, 1402.0], [65.0, 1403.0], [65.1, 1403.0], [65.2, 1403.0], [65.3, 1403.0], [65.4, 1404.0], [65.5, 1404.0], [65.6, 1404.0], [65.7, 1404.0], [65.8, 1405.0], [65.9, 1405.0], [66.0, 1405.0], [66.1, 1406.0], [66.2, 1406.0], [66.3, 1407.0], [66.4, 1407.0], [66.5, 1407.0], [66.6, 1408.0], [66.7, 1408.0], [66.8, 1408.0], [66.9, 1409.0], [67.0, 1409.0], [67.1, 1409.0], [67.2, 1410.0], [67.3, 1410.0], [67.4, 1410.0], [67.5, 1411.0], [67.6, 1411.0], [67.7, 1411.0], [67.8, 1412.0], [67.9, 1412.0], [68.0, 1412.0], [68.1, 1413.0], [68.2, 1413.0], [68.3, 1413.0], [68.4, 1414.0], [68.5, 1414.0], [68.6, 1414.0], [68.7, 1414.0], [68.8, 1415.0], [68.9, 1415.0], [69.0, 1415.0], [69.1, 1416.0], [69.2, 1416.0], [69.3, 1416.0], [69.4, 1417.0], [69.5, 1417.0], [69.6, 1417.0], [69.7, 1418.0], [69.8, 1418.0], [69.9, 1418.0], [70.0, 1419.0], [70.1, 1419.0], [70.2, 1420.0], [70.3, 1420.0], [70.4, 1420.0], [70.5, 1420.0], [70.6, 1421.0], [70.7, 1422.0], [70.8, 1422.0], [70.9, 1422.0], [71.0, 1423.0], [71.1, 1423.0], [71.2, 1423.0], [71.3, 1424.0], [71.4, 1424.0], [71.5, 1425.0], [71.6, 1425.0], [71.7, 1425.0], [71.8, 1426.0], [71.9, 1426.0], [72.0, 1427.0], [72.1, 1427.0], [72.2, 1428.0], [72.3, 1428.0], [72.4, 1428.0], [72.5, 1429.0], [72.6, 1429.0], [72.7, 1429.0], [72.8, 1430.0], [72.9, 1430.0], [73.0, 1431.0], [73.1, 1431.0], [73.2, 1431.0], [73.3, 1432.0], [73.4, 1432.0], [73.5, 1432.0], [73.6, 1433.0], [73.7, 1434.0], [73.8, 1434.0], [73.9, 1435.0], [74.0, 1436.0], [74.1, 1436.0], [74.2, 1437.0], [74.3, 1437.0], [74.4, 1437.0], [74.5, 1438.0], [74.6, 1438.0], [74.7, 1439.0], [74.8, 1439.0], [74.9, 1440.0], [75.0, 1440.0], [75.1, 1440.0], [75.2, 1441.0], [75.3, 1442.0], [75.4, 1442.0], [75.5, 1442.0], [75.6, 1443.0], [75.7, 1443.0], [75.8, 1444.0], [75.9, 1445.0], [76.0, 1446.0], [76.1, 1446.0], [76.2, 1447.0], [76.3, 1447.0], [76.4, 1448.0], [76.5, 1449.0], [76.6, 1450.0], [76.7, 1451.0], [76.8, 1452.0], [76.9, 1452.0], [77.0, 1453.0], [77.1, 1454.0], [77.2, 1455.0], [77.3, 1456.0], [77.4, 1456.0], [77.5, 1457.0], [77.6, 1458.0], [77.7, 1459.0], [77.8, 1460.0], [77.9, 1462.0], [78.0, 1464.0], [78.1, 1465.0], [78.2, 1467.0], [78.3, 1468.0], [78.4, 1469.0], [78.5, 1470.0], [78.6, 1472.0], [78.7, 1474.0], [78.8, 1479.0], [78.9, 1485.0], [79.0, 1491.0], [79.1, 1496.0], [79.2, 1513.0], [79.3, 1529.0], [79.4, 1592.0], [79.5, 2045.0], [79.6, 2055.0], [79.7, 2061.0], [79.8, 2068.0], [79.9, 2072.0], [80.0, 2080.0], [80.1, 2082.0], [80.2, 2086.0], [80.3, 2096.0], [80.4, 2100.0], [80.5, 2106.0], [80.6, 2118.0], [80.7, 2132.0], [80.8, 2149.0], [80.9, 2177.0], [81.0, 2534.0], [81.1, 2737.0], [81.2, 2747.0], [81.3, 2755.0], [81.4, 2763.0], [81.5, 2770.0], [81.6, 2778.0], [81.7, 2782.0], [81.8, 2787.0], [81.9, 2792.0], [82.0, 2796.0], [82.1, 2798.0], [82.2, 2803.0], [82.3, 2808.0], [82.4, 2813.0], [82.5, 2820.0], [82.6, 2824.0], [82.7, 2829.0], [82.8, 2833.0], [82.9, 2843.0], [83.0, 2851.0], [83.1, 2865.0], [83.2, 2881.0], [83.3, 2895.0], [83.4, 2924.0], [83.5, 2987.0], [83.6, 3018.0], [83.7, 3049.0], [83.8, 3061.0], [83.9, 3071.0], [84.0, 3081.0], [84.1, 3086.0], [84.2, 3093.0], [84.3, 3100.0], [84.4, 3103.0], [84.5, 3107.0], [84.6, 3109.0], [84.7, 3112.0], [84.8, 3115.0], [84.9, 3118.0], [85.0, 3122.0], [85.1, 3125.0], [85.2, 3128.0], [85.3, 3133.0], [85.4, 3136.0], [85.5, 3140.0], [85.6, 3142.0], [85.7, 3144.0], [85.8, 3147.0], [85.9, 3149.0], [86.0, 3151.0], [86.1, 3154.0], [86.2, 3160.0], [86.3, 3165.0], [86.4, 3177.0], [86.5, 3185.0], [86.6, 3199.0], [86.7, 3212.0], [86.8, 3254.0], [86.9, 3281.0], [87.0, 3378.0], [87.1, 3409.0], [87.2, 3421.0], [87.3, 3435.0], [87.4, 3442.0], [87.5, 3455.0], [87.6, 3467.0], [87.7, 3492.0], [87.8, 3516.0], [87.9, 3544.0], [88.0, 3611.0], [88.1, 3628.0], [88.2, 3658.0], [88.3, 3708.0], [88.4, 3741.0], [88.5, 3782.0], [88.6, 3811.0], [88.7, 3877.0], [88.8, 3925.0], [88.9, 4002.0], [89.0, 4040.0], [89.1, 4066.0], [89.2, 4122.0], [89.3, 4175.0], [89.4, 4188.0], [89.5, 4204.0], [89.6, 4211.0], [89.7, 4220.0], [89.8, 4226.0], [89.9, 4233.0], [90.0, 4240.0], [90.1, 4247.0], [90.2, 4252.0], [90.3, 4258.0], [90.4, 4262.0], [90.5, 4268.0], [90.6, 4275.0], [90.7, 4287.0], [90.8, 4300.0], [90.9, 4306.0], [91.0, 4318.0], [91.1, 4341.0], [91.2, 4353.0], [91.3, 4361.0], [91.4, 4375.0], [91.5, 4391.0], [91.6, 4402.0], [91.7, 4413.0], [91.8, 4428.0], [91.9, 4441.0], [92.0, 4448.0], [92.1, 4459.0], [92.2, 4466.0], [92.3, 4474.0], [92.4, 4480.0], [92.5, 4484.0], [92.6, 4490.0], [92.7, 4498.0], [92.8, 4502.0], [92.9, 4506.0], [93.0, 4511.0], [93.1, 4514.0], [93.2, 4516.0], [93.3, 4521.0], [93.4, 4524.0], [93.5, 4527.0], [93.6, 4530.0], [93.7, 4534.0], [93.8, 4538.0], [93.9, 4541.0], [94.0, 4547.0], [94.1, 4550.0], [94.2, 4555.0], [94.3, 4559.0], [94.4, 4565.0], [94.5, 4569.0], [94.6, 4575.0], [94.7, 4583.0], [94.8, 4590.0], [94.9, 4596.0], [95.0, 4606.0], [95.1, 4617.0], [95.2, 4624.0], [95.3, 4637.0], [95.4, 4647.0], [95.5, 4661.0], [95.6, 4671.0], [95.7, 4688.0], [95.8, 4709.0], [95.9, 4733.0], [96.0, 4742.0], [96.1, 4778.0], [96.2, 4798.0], [96.3, 4821.0], [96.4, 4848.0], [96.5, 4869.0], [96.6, 4905.0], [96.7, 4916.0], [96.8, 4938.0], [96.9, 4953.0], [97.0, 4976.0], [97.1, 4996.0], [97.2, 5018.0], [97.3, 5060.0], [97.4, 5083.0], [97.5, 5116.0], [97.6, 5149.0], [97.7, 5189.0], [97.8, 5201.0], [97.9, 5215.0], [98.0, 5226.0], [98.1, 5236.0], [98.2, 5250.0], [98.3, 5259.0], [98.4, 5266.0], [98.5, 5273.0], [98.6, 5285.0], [98.7, 5301.0], [98.8, 5316.0], [98.9, 5351.0], [99.0, 5376.0], [99.1, 5401.0], [99.2, 5443.0], [99.3, 5511.0], [99.4, 5615.0], [99.5, 5681.0], [99.6, 5739.0], [99.7, 5777.0], [99.8, 6109.0], [99.9, 6408.0]], "isOverall": false, "label": "Get Search", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 1372.0, "series": [{"data": [[600.0, 943.0], [700.0, 607.0], [800.0, 96.0], [900.0, 313.0], [1000.0, 1171.0], [1100.0, 244.0], [1200.0, 36.0], [1300.0, 1172.0], [1400.0, 1372.0], [1500.0, 25.0], [1700.0, 1.0], [1800.0, 1.0], [2000.0, 86.0], [2100.0, 50.0], [2300.0, 1.0], [2400.0, 4.0], [2500.0, 1.0], [2600.0, 1.0], [2700.0, 99.0], [2800.0, 109.0], [2900.0, 22.0], [3000.0, 64.0], [3100.0, 210.0], [3200.0, 28.0], [3300.0, 11.0], [3400.0, 64.0], [3500.0, 20.0], [3700.0, 26.0], [3600.0, 27.0], [3800.0, 18.0], [3900.0, 12.0], [4000.0, 22.0], [4100.0, 30.0], [4200.0, 119.0], [4300.0, 68.0], [4400.0, 104.0], [4500.0, 199.0], [4600.0, 74.0], [4700.0, 44.0], [4800.0, 33.0], [5000.0, 27.0], [5100.0, 30.0], [4900.0, 48.0], [5200.0, 82.0], [5300.0, 38.0], [5500.0, 10.0], [5600.0, 14.0], [5400.0, 16.0], [5800.0, 3.0], [5700.0, 16.0], [6100.0, 6.0], [5900.0, 3.0], [6000.0, 1.0], [6300.0, 2.0], [6200.0, 1.0], [6600.0, 2.0], [6400.0, 4.0], [6900.0, 1.0], [6800.0, 1.0], [7000.0, 1.0], [500.0, 1167.0]], "isOverall": false, "label": "Get Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1878.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 7122.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 7122.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1878.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 3.5714285714285716, "minX": 1.69117962E12, "maxY": 20.0, "series": [{"data": [[1.69118236E12, 15.0], [1.6911827E12, 5.730769230769232], [1.69118014E12, 5.0], [1.6911798E12, 15.691489361702128], [1.69118228E12, 10.0], [1.69118262E12, 15.0], [1.69118006E12, 10.0], [1.69117972E12, 10.0], [1.6911822E12, 5.0], [1.69118254E12, 20.0], [1.69117998E12, 19.61619718309859], [1.69117964E12, 5.0], [1.69118016E12, 4.938271604938272], [1.69118246E12, 20.0], [1.6911799E12, 20.0], [1.69118272E12, 5.0], [1.69117978E12, 15.0], [1.69118268E12, 10.0], [1.69118012E12, 5.0], [1.69118234E12, 15.0], [1.6911797E12, 10.0], [1.6911826E12, 15.0], [1.69118004E12, 14.572438162544168], [1.69118226E12, 5.517241379310344], [1.69117962E12, 4.959183673469386], [1.69118252E12, 20.0], [1.69117996E12, 20.0], [1.69118244E12, 20.0], [1.69117988E12, 20.0], [1.6911801E12, 9.690972222222218], [1.69117976E12, 15.0], [1.69118232E12, 10.355555555555556], [1.69118266E12, 10.0], [1.69118002E12, 15.0], [1.69117968E12, 6.656862745098041], [1.69118224E12, 5.0], [1.69118258E12, 15.949999999999994], [1.69117994E12, 20.0], [1.6911825E12, 20.0], [1.69117986E12, 20.0], [1.69118276E12, 3.5714285714285716], [1.69118242E12, 20.0], [1.69118008E12, 10.0], [1.69118238E12, 15.107692307692307], [1.69117982E12, 20.0], [1.69118264E12, 10.644736842105265], [1.69118E12, 15.0], [1.6911823E12, 10.0], [1.69117974E12, 10.899653979238748], [1.69118256E12, 20.0], [1.69117992E12, 20.0], [1.69118222E12, 5.0], [1.69117966E12, 5.0], [1.69118248E12, 20.0], [1.69117984E12, 20.0], [1.6911824E12, 20.0], [1.69118274E12, 5.0]], "isOverall": false, "label": "TC3: Load Testing", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 20000, "maxX": 1.69118276E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 555.5130597014919, "minX": 1.0, "maxY": 6883.75, "series": [{"data": [[2.0, 592.0], [3.0, 569.0], [4.0, 578.3333333333334], [5.0, 555.5130597014919], [6.0, 672.1428571428572], [7.0, 631.6666666666666], [8.0, 583.0], [9.0, 626.0], [10.0, 694.4705202312144], [11.0, 783.8], [12.0, 724.0], [13.0, 848.2], [14.0, 934.0], [15.0, 1049.789906103287], [16.0, 1198.75], [17.0, 1260.375], [18.0, 1226.8333333333333], [19.0, 1326.8571428571427], [20.0, 1403.4538371640024], [26.0, 2131.0], [27.0, 2072.0], [28.0, 2138.0], [29.0, 2055.0], [30.0, 2105.8161764705883], [35.0, 2113.0], [37.0, 2796.0], [36.0, 2776.0], [39.0, 1462.0], [38.0, 2779.0], [41.0, 3097.6666666666665], [40.0, 2816.0821256038644], [43.0, 3101.9999999999995], [42.0, 3081.0], [44.0, 2325.0], [45.0, 3153.1245421245435], [47.0, 3610.0], [46.0, 3628.0], [49.0, 3660.0], [48.0, 3655.0], [51.0, 3804.125], [50.0, 3524.3409090909095], [52.0, 699.0], [53.0, 4363.428571428571], [55.0, 3528.5], [59.0, 4596.0], [60.0, 4075.5205479452047], [61.0, 4497.714285714286], [62.0, 4212.4], [63.0, 4557.64], [67.0, 4676.0], [66.0, 4821.125], [65.0, 4533.823863636364], [64.0, 4898.888888888889], [71.0, 4989.160000000001], [70.0, 4287.78947368421], [69.0, 4469.5], [68.0, 4283.4375], [72.0, 4571.428571428572], [73.0, 4715.756097560977], [74.0, 4440.733333333333], [75.0, 4809.384210526312], [76.0, 4535.085106382978], [77.0, 4899.166666666667], [78.0, 4593.5], [83.0, 1592.0], [81.0, 4281.333333333333], [80.0, 3476.555555555556], [86.0, 4863.7], [85.0, 4952.476923076924], [87.0, 5227.857142857143], [90.0, 5496.833333333333], [89.0, 5662.555555555556], [88.0, 5152.857142857142], [92.0, 5470.124999999999], [94.0, 5372.0], [93.0, 5704.0], [95.0, 6883.75], [98.0, 3443.0], [99.0, 2737.0], [96.0, 5330.0], [103.0, 5117.777777777777], [101.0, 5335.0], [100.0, 5466.0], [107.0, 3138.4], [106.0, 3383.0], [104.0, 4027.666666666667], [108.0, 3667.6666666666665], [109.0, 3117.0], [1.0, 581.0]], "isOverall": false, "label": "Get Search", "isController": false}, {"data": [[23.569777777777766, 1613.6820000000002]], "isOverall": false, "label": "Get Search-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 109.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 163.45, "minX": 1.69117962E12, "maxY": 114560.65, "series": [{"data": [[1.69118236E12, 19225.15], [1.6911827E12, 20402.2], [1.69118014E12, 69838.3], [1.6911798E12, 110642.7], [1.69118228E12, 19617.5], [1.69118262E12, 37273.25], [1.69118006E12, 113389.15], [1.69117972E12, 113573.8], [1.6911822E12, 4408.15], [1.69118254E12, 33742.1], [1.69117998E12, 111427.4], [1.69117964E12, 71384.8], [1.69118016E12, 63560.7], [1.69118246E12, 29033.9], [1.6911799E12, 111427.4], [1.69118272E12, 18440.45], [1.69117978E12, 112212.1], [1.69118268E12, 27838.35], [1.69118012E12, 71407.7], [1.69118234E12, 22756.3], [1.6911797E12, 109050.4], [1.6911826E12, 37665.6], [1.69118004E12, 111035.05], [1.69118226E12, 11378.15], [1.69117962E12, 19409.85], [1.69118252E12, 36096.2], [1.69117996E12, 112212.1], [1.69118244E12, 34526.8], [1.69117988E12, 111035.05], [1.6911801E12, 112996.8], [1.69117976E12, 112996.8], [1.69118232E12, 17655.75], [1.69118266E12, 27856.85], [1.69118002E12, 112604.45], [1.69117968E12, 80316.4], [1.69118224E12, 12162.85], [1.69118258E12, 39235.0], [1.69117994E12, 111427.4], [1.6911825E12, 36096.2], [1.69117986E12, 111409.2], [1.69118276E12, 2746.45], [1.69118242E12, 32957.4], [1.69118008E12, 114560.65], [1.69118238E12, 25502.75], [1.69117982E12, 111427.4], [1.69118264E12, 29818.6], [1.69118E12, 112212.1], [1.6911823E12, 17263.4], [1.69117974E12, 113379.9], [1.69118256E12, 42373.8], [1.69117992E12, 112604.45], [1.69118222E12, 11378.15], [1.69117966E12, 71384.75], [1.69118248E12, 31388.0], [1.69117984E12, 112604.45], [1.6911824E12, 33742.1], [1.69118274E12, 18832.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69118236E12, 1144.15], [1.6911827E12, 1214.2], [1.69118014E12, 4156.3], [1.6911798E12, 6584.7], [1.69118228E12, 1167.5], [1.69118262E12, 2218.25], [1.69118006E12, 6748.15], [1.69117972E12, 6748.15], [1.6911822E12, 256.85], [1.69118254E12, 2008.1], [1.69117998E12, 6631.4], [1.69117964E12, 4226.35], [1.69118016E12, 3782.7], [1.69118246E12, 1727.9], [1.6911799E12, 6631.4], [1.69118272E12, 1097.45], [1.69117978E12, 6678.1], [1.69118268E12, 1657.85], [1.69118012E12, 4249.7], [1.69118234E12, 1354.3], [1.6911797E12, 6467.95], [1.6911826E12, 2241.6], [1.69118004E12, 6608.05], [1.69118226E12, 677.15], [1.69117962E12, 1144.15], [1.69118252E12, 2148.2], [1.69117996E12, 6678.1], [1.69118244E12, 2054.8], [1.69117988E12, 6608.05], [1.6911801E12, 6724.8], [1.69117976E12, 6724.8], [1.69118232E12, 1050.75], [1.69118266E12, 1657.85], [1.69118002E12, 6701.45], [1.69117968E12, 4763.4], [1.69118224E12, 723.85], [1.69118258E12, 2335.0], [1.69117994E12, 6631.4], [1.6911825E12, 2148.2], [1.69117986E12, 6631.4], [1.69118276E12, 163.45], [1.69118242E12, 1961.4], [1.69118008E12, 6818.2], [1.69118238E12, 1517.75], [1.69117982E12, 6631.4], [1.69118264E12, 1774.6], [1.69118E12, 6678.1], [1.6911823E12, 1027.4], [1.69117974E12, 6748.15], [1.69118256E12, 2521.8], [1.69117992E12, 6701.45], [1.69118222E12, 677.15], [1.69117966E12, 4226.35], [1.69118248E12, 1868.0], [1.69117984E12, 6701.45], [1.6911824E12, 2008.1], [1.69118274E12, 1120.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 20000, "maxX": 1.69118276E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 547.248618784531, "minX": 1.69117962E12, "maxY": 5787.857142857144, "series": [{"data": [[1.69118236E12, 5787.857142857144], [1.6911827E12, 2304.9615384615386], [1.69118014E12, 561.0112359550559], [1.6911798E12, 1090.4042553191496], [1.69118228E12, 4038.2000000000003], [1.69118262E12, 3143.7789473684206], [1.69118006E12, 693.4325259515568], [1.69117972E12, 686.3806228373697], [1.6911822E12, 999.6363636363636], [1.69118254E12, 4559.093023255811], [1.69117998E12, 1402.5598591549292], [1.69117964E12, 547.248618784531], [1.69118016E12, 561.3518518518516], [1.69118246E12, 5140.689189189189], [1.6911799E12, 1406.3626760563377], [1.69118272E12, 2078.978723404255], [1.69117978E12, 1050.5769230769229], [1.69118268E12, 2831.6197183098593], [1.69118012E12, 551.5824175824173], [1.69118234E12, 4975.051724137932], [1.6911797E12, 721.4476534296025], [1.6911826E12, 3120.385416666666], [1.69118004E12, 1046.1978798586572], [1.69118226E12, 3378.862068965517], [1.69117962E12, 559.8571428571427], [1.69118252E12, 4421.391304347829], [1.69117996E12, 1403.0629370629374], [1.69118244E12, 4692.511363636365], [1.69117988E12, 1414.2155477031804], [1.6911801E12, 667.6701388888888], [1.69117976E12, 1041.8611111111102], [1.69118232E12, 4471.577777777777], [1.69118266E12, 2806.549295774647], [1.69118002E12, 1042.4564459930311], [1.69117968E12, 601.4852941176467], [1.69118224E12, 3330.3548387096776], [1.69118258E12, 3288.19], [1.69117994E12, 1404.7781690140848], [1.6911825E12, 4290.728260869563], [1.69117986E12, 1408.5633802816908], [1.69118276E12, 2089.571428571429], [1.69118242E12, 4755.797619047618], [1.69118008E12, 683.3493150684928], [1.69118238E12, 5020.399999999997], [1.69117982E12, 1409.5352112676062], [1.69118264E12, 2875.2631578947376], [1.69118E12, 1043.0524475524473], [1.6911823E12, 4453.659090909092], [1.69117974E12, 741.885813148789], [1.69118256E12, 3840.601851851852], [1.69117992E12, 1396.1219512195119], [1.69118222E12, 3227.5172413793102], [1.69117966E12, 558.2154696132598], [1.69118248E12, 5135.225], [1.69117984E12, 1391.9756097560976], [1.6911824E12, 4435.593023255813], [1.69118274E12, 2117.2083333333344]], "isOverall": false, "label": "Get Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 20000, "maxX": 1.69118276E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 547.1160220994474, "minX": 1.69117962E12, "maxY": 5787.7551020408155, "series": [{"data": [[1.69118236E12, 5787.7551020408155], [1.6911827E12, 2304.8846153846152], [1.69118014E12, 560.8820224719102], [1.6911798E12, 1090.2198581560283], [1.69118228E12, 4038.040000000001], [1.69118262E12, 3143.621052631578], [1.69118006E12, 693.2698961937718], [1.69117972E12, 686.2318339100337], [1.6911822E12, 999.2727272727274], [1.69118254E12, 4558.906976744188], [1.69117998E12, 1402.4366197183097], [1.69117964E12, 547.1160220994474], [1.69118016E12, 561.2160493827162], [1.69118246E12, 5140.527027027026], [1.6911799E12, 1406.2077464788738], [1.69118272E12, 2078.8510638297867], [1.69117978E12, 1050.3986013986012], [1.69118268E12, 2831.3943661971834], [1.69118012E12, 551.3681318681319], [1.69118234E12, 4974.93103448276], [1.6911797E12, 721.2960288808663], [1.6911826E12, 3120.1979166666665], [1.69118004E12, 1046.0212014134277], [1.69118226E12, 3378.6551724137935], [1.69117962E12, 559.6938775510203], [1.69118252E12, 4421.141304347827], [1.69117996E12, 1402.9265734265741], [1.69118244E12, 4692.272727272727], [1.69117988E12, 1414.053003533569], [1.6911801E12, 667.517361111111], [1.69117976E12, 1041.7222222222213], [1.69118232E12, 4471.355555555557], [1.69118266E12, 2806.408450704225], [1.69118002E12, 1042.337979094076], [1.69117968E12, 601.3578431372547], [1.69118224E12, 3330.0645161290317], [1.69118258E12, 3288.0099999999993], [1.69117994E12, 1404.6338028169012], [1.6911825E12, 4290.576086956521], [1.69117986E12, 1408.4119718309864], [1.69118276E12, 2089.1428571428573], [1.69118242E12, 4755.666666666664], [1.69118008E12, 683.1917808219181], [1.69118238E12, 5020.184615384615], [1.69117982E12, 1409.3626760563384], [1.69118264E12, 2875.0394736842113], [1.69118E12, 1042.9160839160836], [1.6911823E12, 4453.522727272727], [1.69117974E12, 741.7474048442912], [1.69118256E12, 3840.444444444444], [1.69117992E12, 1395.940766550523], [1.69118222E12, 3148.1724137931033], [1.69117966E12, 557.983425414365], [1.69118248E12, 5135.0], [1.69117984E12, 1391.8153310104528], [1.6911824E12, 4435.441860465117], [1.69118274E12, 2117.0833333333335]], "isOverall": false, "label": "Get Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 20000, "maxX": 1.69118276E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 228.5, "minX": 1.69117962E12, "maxY": 251.63636363636365, "series": [{"data": [[1.69118236E12, 231.59183673469389], [1.6911827E12, 232.23076923076925], [1.69118014E12, 229.74719101123588], [1.6911798E12, 232.2659574468085], [1.69118228E12, 231.8], [1.69118262E12, 231.62105263157895], [1.69118006E12, 232.17993079584775], [1.69117972E12, 232.12110726643598], [1.6911822E12, 251.63636363636365], [1.69118254E12, 230.16279069767447], [1.69117998E12, 232.83802816901408], [1.69117964E12, 230.0441988950276], [1.69118016E12, 232.24691358024697], [1.69118246E12, 232.37837837837833], [1.6911799E12, 235.6091549295775], [1.69118272E12, 231.23404255319144], [1.69117978E12, 232.01048951048946], [1.69118268E12, 229.5774647887324], [1.69118012E12, 229.42857142857144], [1.69118234E12, 232.86206896551727], [1.6911797E12, 237.59927797833936], [1.6911826E12, 233.11458333333331], [1.69118004E12, 236.17314487632504], [1.69118226E12, 229.51724137931038], [1.69117962E12, 234.51020408163265], [1.69118252E12, 230.34782608695656], [1.69117996E12, 236.30419580419579], [1.69118244E12, 232.73863636363643], [1.69117988E12, 231.1943462897526], [1.6911801E12, 231.88194444444426], [1.69117976E12, 232.10763888888889], [1.69118232E12, 229.33333333333331], [1.69118266E12, 231.5211267605633], [1.69118002E12, 244.4912891986063], [1.69117968E12, 231.18627450980392], [1.69118224E12, 232.83870967741942], [1.69118258E12, 231.19], [1.69117994E12, 233.08450704225348], [1.6911825E12, 231.97826086956516], [1.69117986E12, 231.34154929577466], [1.69118276E12, 236.71428571428572], [1.69118242E12, 234.19047619047623], [1.69118008E12, 231.44178082191792], [1.69118238E12, 231.3846153846153], [1.69117982E12, 231.19718309859155], [1.69118264E12, 229.48684210526315], [1.69118E12, 235.37762237762217], [1.6911823E12, 234.22727272727278], [1.69117974E12, 233.2941176470588], [1.69118256E12, 230.8703703703704], [1.69117992E12, 237.219512195122], [1.69118222E12, 250.7931034482759], [1.69117966E12, 230.60220994475134], [1.69118248E12, 231.6875], [1.69117984E12, 231.93031358885017], [1.6911824E12, 234.5930232558139], [1.69118274E12, 228.5]], "isOverall": false, "label": "Get Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 20000, "maxX": 1.69118276E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 519.0, "minX": 1.69117962E12, "maxY": 7097.0, "series": [{"data": [[1.69118236E12, 7097.0], [1.6911827E12, 2865.0], [1.69118014E12, 727.0], [1.6911798E12, 1434.0], [1.69118228E12, 4427.0], [1.69118262E12, 3277.0], [1.69118006E12, 899.0], [1.69117972E12, 1022.0], [1.6911822E12, 1793.0], [1.69118254E12, 4645.0], [1.69117998E12, 1514.0], [1.69117964E12, 695.0], [1.69118016E12, 704.0], [1.69118246E12, 5293.0], [1.6911799E12, 1572.0], [1.69118272E12, 2123.0], [1.69117978E12, 1245.0], [1.69118268E12, 2983.0], [1.69118012E12, 702.0], [1.69118234E12, 5686.0], [1.6911797E12, 1231.0], [1.6911826E12, 3199.0], [1.69118004E12, 1209.0], [1.69118226E12, 3754.0], [1.69117962E12, 652.0], [1.69118252E12, 4606.0], [1.69117996E12, 1585.0], [1.69118244E12, 6265.0], [1.69117988E12, 1486.0], [1.6911801E12, 811.0], [1.69117976E12, 1154.0], [1.69118232E12, 4747.0], [1.69118266E12, 2881.0], [1.69118002E12, 1415.0], [1.69117968E12, 891.0], [1.69118224E12, 3982.0], [1.69118258E12, 3670.0], [1.69117994E12, 1591.0], [1.6911825E12, 4673.0], [1.69117986E12, 1504.0], [1.69118276E12, 2138.0], [1.69118242E12, 5072.0], [1.69118008E12, 845.0], [1.69118238E12, 5856.0], [1.69117982E12, 1482.0], [1.69118264E12, 3201.0], [1.69118E12, 1176.0], [1.6911823E12, 4777.0], [1.69117974E12, 1200.0], [1.69118256E12, 4683.0], [1.69117992E12, 1493.0], [1.69118222E12, 6165.0], [1.69117966E12, 693.0], [1.69118248E12, 5511.0], [1.69117984E12, 1483.0], [1.6911824E12, 5000.0], [1.69118274E12, 2189.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69118236E12, 5108.0], [1.6911827E12, 2005.0], [1.69118014E12, 520.0], [1.6911798E12, 960.0], [1.69118228E12, 3635.0], [1.69118262E12, 3035.0], [1.69118006E12, 534.0], [1.69117972E12, 537.0], [1.6911822E12, 697.0], [1.69118254E12, 4466.0], [1.69117998E12, 965.0], [1.69117964E12, 519.0], [1.69118016E12, 522.0], [1.69118246E12, 4812.0], [1.6911799E12, 1297.0], [1.69118272E12, 2045.0], [1.69117978E12, 952.0], [1.69118268E12, 2726.0], [1.69118012E12, 522.0], [1.69118234E12, 4128.0], [1.6911797E12, 537.0], [1.6911826E12, 3040.0], [1.69118004E12, 556.0], [1.69118226E12, 3100.0], [1.69117962E12, 524.0], [1.69118252E12, 4151.0], [1.69117996E12, 1186.0], [1.69118244E12, 4230.0], [1.69117988E12, 1332.0], [1.6911801E12, 538.0], [1.69117976E12, 923.0], [1.69118232E12, 4204.0], [1.69118266E12, 2743.0], [1.69118002E12, 763.0], [1.69117968E12, 522.0], [1.69118224E12, 2892.0], [1.69118258E12, 3064.0], [1.69117994E12, 1270.0], [1.6911825E12, 4166.0], [1.69117986E12, 1333.0], [1.69118276E12, 2050.0], [1.69118242E12, 4375.0], [1.69118008E12, 532.0], [1.69118238E12, 3733.0], [1.69117982E12, 1314.0], [1.69118264E12, 2713.0], [1.69118E12, 936.0], [1.6911823E12, 4191.0], [1.69117974E12, 527.0], [1.69118256E12, 3376.0], [1.69117992E12, 1265.0], [1.69118222E12, 1897.0], [1.69117966E12, 524.0], [1.69118248E12, 4341.0], [1.69117984E12, 1319.0], [1.6911824E12, 3724.0], [1.69118274E12, 2009.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69118236E12, 6603.0], [1.6911827E12, 2795.4], [1.69118014E12, 618.2], [1.6911798E12, 1198.0000000000007], [1.69118228E12, 4310.2], [1.69118262E12, 3228.8], [1.69118006E12, 788.0], [1.69117972E12, 768.0], [1.6911822E12, 1752.8000000000002], [1.69118254E12, 4619.3], [1.69117998E12, 1456.0], [1.69117964E12, 577.8], [1.69118016E12, 598.7], [1.69118246E12, 5269.0], [1.6911799E12, 1460.0], [1.69118272E12, 2110.0], [1.69117978E12, 1102.3], [1.69118268E12, 2899.8], [1.69118012E12, 586.0], [1.69118234E12, 5495.1], [1.6911797E12, 852.4000000000001], [1.6911826E12, 3154.7], [1.69118004E12, 1130.3999999999999], [1.69118226E12, 3688.0], [1.69117962E12, 602.0], [1.69118252E12, 4550.1], [1.69117996E12, 1454.2], [1.69118244E12, 5490.500000000004], [1.69117988E12, 1449.6], [1.6911801E12, 723.1], [1.69117976E12, 1092.2], [1.69118232E12, 4668.6], [1.69118266E12, 2856.2], [1.69118002E12, 1132.2], [1.69117968E12, 766.0], [1.69118224E12, 3884.4], [1.69118258E12, 3634.3], [1.69117994E12, 1453.5], [1.6911825E12, 4542.3], [1.69117986E12, 1450.0], [1.69118276E12, 2138.0], [1.69118242E12, 4944.0], [1.69118008E12, 750.0], [1.69118238E12, 5710.0], [1.69117982E12, 1453.0], [1.69118264E12, 3125.0], [1.69118E12, 1095.3], [1.6911823E12, 4629.5], [1.69117974E12, 1027.0], [1.69118256E12, 4619.2], [1.69117992E12, 1441.0], [1.69118222E12, 3898.0], [1.69117966E12, 614.0], [1.69118248E12, 5398.4], [1.69117984E12, 1426.2], [1.6911824E12, 4793.4], [1.69118274E12, 2173.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69118236E12, 7097.0], [1.6911827E12, 2865.0], [1.69118014E12, 721.47], [1.6911798E12, 1430.17], [1.69118228E12, 4427.0], [1.69118262E12, 3277.0], [1.69118006E12, 885.3000000000003], [1.69117972E12, 936.6000000000001], [1.6911822E12, 1793.0], [1.69118254E12, 4645.0], [1.69117998E12, 1496.8499999999995], [1.69117964E12, 643.3400000000004], [1.69118016E12, 702.74], [1.69118246E12, 5293.0], [1.6911799E12, 1541.15], [1.69118272E12, 2123.0], [1.69117978E12, 1159.29], [1.69118268E12, 2983.0], [1.69118012E12, 697.02], [1.69118234E12, 5686.0], [1.6911797E12, 1209.7399999999996], [1.6911826E12, 3199.0], [1.69118004E12, 1196.48], [1.69118226E12, 3754.0], [1.69117962E12, 652.0], [1.69118252E12, 4606.0], [1.69117996E12, 1539.04], [1.69118244E12, 6265.0], [1.69117988E12, 1475.7600000000002], [1.6911801E12, 787.44], [1.69117976E12, 1128.9800000000002], [1.69118232E12, 4747.0], [1.69118266E12, 2881.0], [1.69118002E12, 1391.72], [1.69117968E12, 872.8499999999999], [1.69118224E12, 3982.0], [1.69118258E12, 3669.96], [1.69117994E12, 1507.4499999999994], [1.6911825E12, 4673.0], [1.69117986E12, 1494.75], [1.69118276E12, 2138.0], [1.69118242E12, 5072.0], [1.69118008E12, 831.3499999999999], [1.69118238E12, 5856.0], [1.69117982E12, 1476.4499999999998], [1.69118264E12, 3201.0], [1.69118E12, 1146.4299999999998], [1.6911823E12, 4777.0], [1.69117974E12, 1157.5000000000005], [1.69118256E12, 4681.2], [1.69117992E12, 1470.88], [1.69118222E12, 6165.0], [1.69117966E12, 688.08], [1.69118248E12, 5511.0], [1.69117984E12, 1464.08], [1.6911824E12, 5000.0], [1.69118274E12, 2189.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69118236E12, 5732.0], [1.6911827E12, 2100.5], [1.69118014E12, 549.0], [1.6911798E12, 1064.0], [1.69118228E12, 4048.0], [1.69118262E12, 3145.0], [1.69118006E12, 695.0], [1.69117972E12, 684.0], [1.6911822E12, 860.0], [1.69118254E12, 4557.0], [1.69117998E12, 1409.5], [1.69117964E12, 540.0], [1.69118016E12, 557.0], [1.69118246E12, 5208.0], [1.6911799E12, 1399.0], [1.69118272E12, 2081.0], [1.69117978E12, 1053.0], [1.69118268E12, 2830.0], [1.69118012E12, 545.0], [1.69118234E12, 4952.5], [1.6911797E12, 696.0], [1.6911826E12, 3121.5], [1.69118004E12, 1054.0], [1.69118226E12, 3358.0], [1.69117962E12, 551.0], [1.69118252E12, 4499.0], [1.69117996E12, 1404.0], [1.69118244E12, 4520.5], [1.69117988E12, 1415.0], [1.6911801E12, 670.5], [1.69117976E12, 1043.5], [1.69118232E12, 4460.0], [1.69118266E12, 2806.0], [1.69118002E12, 1041.0], [1.69117968E12, 560.5], [1.69118224E12, 3231.0], [1.69118258E12, 3149.0], [1.69117994E12, 1402.5], [1.6911825E12, 4257.0], [1.69117986E12, 1403.5], [1.69118276E12, 2078.0], [1.69118242E12, 4785.0], [1.69118008E12, 686.5], [1.69118238E12, 5204.0], [1.69117982E12, 1408.5], [1.69118264E12, 2807.0], [1.69118E12, 1045.0], [1.6911823E12, 4478.0], [1.69117974E12, 700.0], [1.69118256E12, 3522.0], [1.69117992E12, 1396.0], [1.69118222E12, 3018.0], [1.69117966E12, 547.0], [1.69118248E12, 5239.5], [1.69117984E12, 1392.0], [1.6911824E12, 4504.0], [1.69118274E12, 2115.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.69118236E12, 6917.5], [1.6911827E12, 2823.2], [1.69118014E12, 649.3499999999999], [1.6911798E12, 1387.55], [1.69118228E12, 4376.25], [1.69118262E12, 3259.6], [1.69118006E12, 818.0], [1.69117972E12, 790.5], [1.6911822E12, 1793.0], [1.69118254E12, 4638.3], [1.69117998E12, 1465.75], [1.69117964E12, 601.4000000000001], [1.69118016E12, 612.55], [1.69118246E12, 5273.0], [1.6911799E12, 1482.25], [1.69118272E12, 2116.4], [1.69117978E12, 1119.8999999999999], [1.69118268E12, 2905.4], [1.69118012E12, 615.3499999999999], [1.69118234E12, 5633.25], [1.6911797E12, 1093.1], [1.6911826E12, 3174.6], [1.69118004E12, 1162.4], [1.69118226E12, 3735.5], [1.69117962E12, 620.0], [1.69118252E12, 4568.5], [1.69117996E12, 1476.6], [1.69118244E12, 6091.0], [1.69117988E12, 1464.6], [1.6911801E12, 743.0], [1.69117976E12, 1108.0], [1.69118232E12, 4717.099999999999], [1.69118266E12, 2870.0], [1.69118002E12, 1197.1999999999998], [1.69117968E12, 801.25], [1.69118224E12, 3979.0], [1.69118258E12, 3654.8], [1.69117994E12, 1466.5], [1.6911825E12, 4604.2], [1.69117986E12, 1466.25], [1.69118276E12, 2138.0], [1.69118242E12, 4974.5], [1.69118008E12, 778.0999999999998], [1.69118238E12, 5767.9], [1.69117982E12, 1460.5], [1.69118264E12, 3143.65], [1.69118E12, 1119.65], [1.6911823E12, 4666.25], [1.69117974E12, 1077.5], [1.69118256E12, 4636.1], [1.69117992E12, 1451.0], [1.69118222E12, 5045.0], [1.69117966E12, 629.9], [1.69118248E12, 5444.4], [1.69117984E12, 1436.0], [1.6911824E12, 4842.5], [1.69118274E12, 2183.4]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 20000, "maxX": 1.69118276E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 546.0, "minX": 1.0, "maxY": 4367.0, "series": [{"data": [[8.0, 558.0], [2.0, 4057.0], [9.0, 547.0], [10.0, 546.0], [11.0, 683.0], [12.0, 871.0], [3.0, 4048.0], [13.0, 1092.0], [14.0, 1367.0], [15.0, 1036.0], [16.0, 879.5], [4.0, 3149.0], [1.0, 3423.5], [17.0, 1066.0], [5.0, 4187.0], [6.0, 4367.0], [7.0, 4185.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 17.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 546.0, "minX": 1.0, "maxY": 4367.0, "series": [{"data": [[8.0, 557.5], [2.0, 4042.5], [9.0, 547.0], [10.0, 546.0], [11.0, 683.0], [12.0, 871.0], [3.0, 4048.0], [13.0, 1092.0], [14.0, 1367.0], [15.0, 1036.0], [16.0, 879.0], [4.0, 3148.5], [1.0, 3423.5], [17.0, 1066.0], [5.0, 4187.0], [6.0, 4367.0], [7.0, 4185.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 17.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.69117962E12, "maxY": 14.7, "series": [{"data": [[1.69118236E12, 2.45], [1.6911827E12, 2.35], [1.69118014E12, 8.9], [1.6911798E12, 14.35], [1.69118228E12, 2.5], [1.69118262E12, 4.75], [1.69118006E12, 14.45], [1.69117972E12, 14.45], [1.6911822E12, 0.8], [1.69118254E12, 4.3], [1.69117998E12, 13.95], [1.69117964E12, 9.05], [1.69118016E12, 7.85], [1.69118246E12, 3.7], [1.6911799E12, 14.25], [1.69118272E12, 2.35], [1.69117978E12, 14.3], [1.69118268E12, 3.55], [1.69118012E12, 9.1], [1.69118234E12, 2.9], [1.6911797E12, 13.85], [1.6911826E12, 4.8], [1.69118004E12, 13.9], [1.69118226E12, 1.7], [1.69117962E12, 2.7], [1.69118252E12, 4.6], [1.69117996E12, 14.3], [1.69118244E12, 4.4], [1.69117988E12, 14.1], [1.6911801E12, 14.15], [1.69117976E12, 14.4], [1.69118232E12, 2.5], [1.69118266E12, 3.55], [1.69118002E12, 14.35], [1.69117968E12, 10.45], [1.69118224E12, 1.55], [1.69118258E12, 4.75], [1.69117994E12, 14.2], [1.6911825E12, 4.6], [1.69117986E12, 14.2], [1.69118276E12, 0.1], [1.69118242E12, 4.2], [1.69118008E12, 14.6], [1.69118238E12, 3.4], [1.69117982E12, 14.2], [1.69118264E12, 3.55], [1.69118E12, 14.3], [1.6911823E12, 2.2], [1.69117974E12, 14.7], [1.69118256E12, 5.4], [1.69117992E12, 14.35], [1.69118222E12, 1.45], [1.69117966E12, 9.05], [1.69118248E12, 4.0], [1.69117984E12, 14.35], [1.6911824E12, 4.4], [1.69118274E12, 2.4]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 20000, "maxX": 1.69118276E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.35, "minX": 1.69117962E12, "maxY": 14.6, "series": [{"data": [[1.69118236E12, 2.45], [1.6911827E12, 2.6], [1.69118014E12, 8.9], [1.6911798E12, 14.1], [1.69118228E12, 2.5], [1.69118262E12, 4.75], [1.69118006E12, 14.45], [1.69117972E12, 14.45], [1.6911822E12, 0.55], [1.69118254E12, 4.3], [1.69117998E12, 14.2], [1.69117964E12, 9.05], [1.69118016E12, 8.1], [1.69118246E12, 3.7], [1.6911799E12, 14.2], [1.69118272E12, 2.35], [1.69117978E12, 14.3], [1.69118268E12, 3.55], [1.69118012E12, 9.1], [1.69118234E12, 2.9], [1.6911797E12, 13.85], [1.6911826E12, 4.8], [1.69118004E12, 14.15], [1.69118226E12, 1.45], [1.69117962E12, 2.45], [1.69118252E12, 4.6], [1.69117996E12, 14.3], [1.69118244E12, 4.4], [1.69117988E12, 14.15], [1.6911801E12, 14.4], [1.69117976E12, 14.4], [1.69118232E12, 2.25], [1.69118266E12, 3.55], [1.69118002E12, 14.35], [1.69117968E12, 10.2], [1.69118224E12, 1.55], [1.69118258E12, 5.0], [1.69117994E12, 14.2], [1.6911825E12, 4.6], [1.69117986E12, 14.2], [1.69118276E12, 0.35], [1.69118242E12, 4.2], [1.69118008E12, 14.6], [1.69118238E12, 3.25], [1.69117982E12, 14.2], [1.69118264E12, 3.8], [1.69118E12, 14.3], [1.6911823E12, 2.2], [1.69117974E12, 14.45], [1.69118256E12, 5.4], [1.69117992E12, 14.35], [1.69118222E12, 1.45], [1.69117966E12, 9.05], [1.69118248E12, 4.0], [1.69117984E12, 14.35], [1.6911824E12, 4.3], [1.69118274E12, 2.4]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 20000, "maxX": 1.69118276E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.35, "minX": 1.69117962E12, "maxY": 14.6, "series": [{"data": [[1.69118236E12, 2.45], [1.6911827E12, 2.6], [1.69118014E12, 8.9], [1.6911798E12, 14.1], [1.69118228E12, 2.5], [1.69118262E12, 4.75], [1.69118006E12, 14.45], [1.69117972E12, 14.45], [1.6911822E12, 0.55], [1.69118254E12, 4.3], [1.69117998E12, 14.2], [1.69117964E12, 9.05], [1.69118016E12, 8.1], [1.69118246E12, 3.7], [1.6911799E12, 14.2], [1.69118272E12, 2.35], [1.69117978E12, 14.3], [1.69118268E12, 3.55], [1.69118012E12, 9.1], [1.69118234E12, 2.9], [1.6911797E12, 13.85], [1.6911826E12, 4.8], [1.69118004E12, 14.15], [1.69118226E12, 1.45], [1.69117962E12, 2.45], [1.69118252E12, 4.6], [1.69117996E12, 14.3], [1.69118244E12, 4.4], [1.69117988E12, 14.15], [1.6911801E12, 14.4], [1.69117976E12, 14.4], [1.69118232E12, 2.25], [1.69118266E12, 3.55], [1.69118002E12, 14.35], [1.69117968E12, 10.2], [1.69118224E12, 1.55], [1.69118258E12, 5.0], [1.69117994E12, 14.2], [1.6911825E12, 4.6], [1.69117986E12, 14.2], [1.69118276E12, 0.35], [1.69118242E12, 4.2], [1.69118008E12, 14.6], [1.69118238E12, 3.25], [1.69117982E12, 14.2], [1.69118264E12, 3.8], [1.69118E12, 14.3], [1.6911823E12, 2.2], [1.69117974E12, 14.45], [1.69118256E12, 5.4], [1.69117992E12, 14.35], [1.69118222E12, 1.45], [1.69117966E12, 9.05], [1.69118248E12, 4.0], [1.69117984E12, 14.35], [1.6911824E12, 4.3], [1.69118274E12, 2.4]], "isOverall": false, "label": "Get Search-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 20000, "maxX": 1.69118276E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.35, "minX": 1.69117962E12, "maxY": 14.6, "series": [{"data": [[1.69118236E12, 2.45], [1.6911827E12, 2.6], [1.69118014E12, 8.9], [1.6911798E12, 14.1], [1.69118228E12, 2.5], [1.69118262E12, 4.75], [1.69118006E12, 14.45], [1.69117972E12, 14.45], [1.6911822E12, 0.55], [1.69118254E12, 4.3], [1.69117998E12, 14.2], [1.69117964E12, 9.05], [1.69118016E12, 8.1], [1.69118246E12, 3.7], [1.6911799E12, 14.2], [1.69118272E12, 2.35], [1.69117978E12, 14.3], [1.69118268E12, 3.55], [1.69118012E12, 9.1], [1.69118234E12, 2.9], [1.6911797E12, 13.85], [1.6911826E12, 4.8], [1.69118004E12, 14.15], [1.69118226E12, 1.45], [1.69117962E12, 2.45], [1.69118252E12, 4.6], [1.69117996E12, 14.3], [1.69118244E12, 4.4], [1.69117988E12, 14.15], [1.6911801E12, 14.4], [1.69117976E12, 14.4], [1.69118232E12, 2.25], [1.69118266E12, 3.55], [1.69118002E12, 14.35], [1.69117968E12, 10.2], [1.69118224E12, 1.55], [1.69118258E12, 5.0], [1.69117994E12, 14.2], [1.6911825E12, 4.6], [1.69117986E12, 14.2], [1.69118276E12, 0.35], [1.69118242E12, 4.2], [1.69118008E12, 14.6], [1.69118238E12, 3.25], [1.69117982E12, 14.2], [1.69118264E12, 3.8], [1.69118E12, 14.3], [1.6911823E12, 2.2], [1.69117974E12, 14.45], [1.69118256E12, 5.4], [1.69117992E12, 14.35], [1.69118222E12, 1.45], [1.69117966E12, 9.05], [1.69118248E12, 4.0], [1.69117984E12, 14.35], [1.6911824E12, 4.3], [1.69118274E12, 2.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 20000, "maxX": 1.69118276E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

