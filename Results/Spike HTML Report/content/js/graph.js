/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 520.0, "minX": 0.0, "maxY": 7225.0, "series": [{"data": [[0.0, 520.0], [0.1, 521.0], [0.2, 525.0], [0.3, 530.0], [0.4, 531.0], [0.5, 535.0], [0.6, 536.0], [0.7, 538.0], [0.8, 542.0], [0.9, 545.0], [1.0, 546.0], [1.1, 553.0], [1.2, 559.0], [1.3, 561.0], [1.4, 564.0], [1.5, 566.0], [1.6, 569.0], [1.7, 572.0], [1.8, 574.0], [1.9, 576.0], [2.0, 580.0], [2.1, 582.0], [2.2, 585.0], [2.3, 587.0], [2.4, 590.0], [2.5, 593.0], [2.6, 596.0], [2.7, 598.0], [2.8, 601.0], [2.9, 603.0], [3.0, 605.0], [3.1, 607.0], [3.2, 609.0], [3.3, 610.0], [3.4, 612.0], [3.5, 614.0], [3.6, 616.0], [3.7, 618.0], [3.8, 620.0], [3.9, 621.0], [4.0, 622.0], [4.1, 624.0], [4.2, 626.0], [4.3, 628.0], [4.4, 630.0], [4.5, 632.0], [4.6, 633.0], [4.7, 634.0], [4.8, 636.0], [4.9, 637.0], [5.0, 639.0], [5.1, 640.0], [5.2, 641.0], [5.3, 643.0], [5.4, 644.0], [5.5, 645.0], [5.6, 646.0], [5.7, 647.0], [5.8, 649.0], [5.9, 650.0], [6.0, 650.0], [6.1, 652.0], [6.2, 652.0], [6.3, 654.0], [6.4, 655.0], [6.5, 656.0], [6.6, 656.0], [6.7, 658.0], [6.8, 658.0], [6.9, 659.0], [7.0, 661.0], [7.1, 662.0], [7.2, 663.0], [7.3, 664.0], [7.4, 665.0], [7.5, 666.0], [7.6, 667.0], [7.7, 668.0], [7.8, 669.0], [7.9, 669.0], [8.0, 670.0], [8.1, 671.0], [8.2, 673.0], [8.3, 674.0], [8.4, 674.0], [8.5, 675.0], [8.6, 676.0], [8.7, 677.0], [8.8, 677.0], [8.9, 678.0], [9.0, 679.0], [9.1, 679.0], [9.2, 681.0], [9.3, 682.0], [9.4, 683.0], [9.5, 683.0], [9.6, 684.0], [9.7, 685.0], [9.8, 685.0], [9.9, 687.0], [10.0, 687.0], [10.1, 688.0], [10.2, 690.0], [10.3, 691.0], [10.4, 691.0], [10.5, 693.0], [10.6, 694.0], [10.7, 694.0], [10.8, 696.0], [10.9, 697.0], [11.0, 698.0], [11.1, 699.0], [11.2, 700.0], [11.3, 701.0], [11.4, 702.0], [11.5, 703.0], [11.6, 703.0], [11.7, 705.0], [11.8, 706.0], [11.9, 707.0], [12.0, 708.0], [12.1, 709.0], [12.2, 710.0], [12.3, 711.0], [12.4, 712.0], [12.5, 713.0], [12.6, 714.0], [12.7, 716.0], [12.8, 717.0], [12.9, 719.0], [13.0, 721.0], [13.1, 723.0], [13.2, 724.0], [13.3, 725.0], [13.4, 726.0], [13.5, 727.0], [13.6, 729.0], [13.7, 731.0], [13.8, 732.0], [13.9, 734.0], [14.0, 735.0], [14.1, 737.0], [14.2, 738.0], [14.3, 740.0], [14.4, 742.0], [14.5, 743.0], [14.6, 746.0], [14.7, 749.0], [14.8, 751.0], [14.9, 752.0], [15.0, 754.0], [15.1, 755.0], [15.2, 756.0], [15.3, 758.0], [15.4, 760.0], [15.5, 763.0], [15.6, 765.0], [15.7, 766.0], [15.8, 768.0], [15.9, 770.0], [16.0, 773.0], [16.1, 775.0], [16.2, 776.0], [16.3, 778.0], [16.4, 779.0], [16.5, 782.0], [16.6, 785.0], [16.7, 788.0], [16.8, 790.0], [16.9, 794.0], [17.0, 799.0], [17.1, 801.0], [17.2, 803.0], [17.3, 808.0], [17.4, 815.0], [17.5, 819.0], [17.6, 822.0], [17.7, 824.0], [17.8, 830.0], [17.9, 834.0], [18.0, 837.0], [18.1, 840.0], [18.2, 847.0], [18.3, 851.0], [18.4, 859.0], [18.5, 861.0], [18.6, 867.0], [18.7, 875.0], [18.8, 881.0], [18.9, 895.0], [19.0, 900.0], [19.1, 907.0], [19.2, 913.0], [19.3, 916.0], [19.4, 921.0], [19.5, 926.0], [19.6, 930.0], [19.7, 934.0], [19.8, 942.0], [19.9, 948.0], [20.0, 950.0], [20.1, 954.0], [20.2, 958.0], [20.3, 961.0], [20.4, 963.0], [20.5, 964.0], [20.6, 967.0], [20.7, 969.0], [20.8, 970.0], [20.9, 972.0], [21.0, 973.0], [21.1, 975.0], [21.2, 976.0], [21.3, 977.0], [21.4, 978.0], [21.5, 979.0], [21.6, 983.0], [21.7, 984.0], [21.8, 985.0], [21.9, 986.0], [22.0, 986.0], [22.1, 987.0], [22.2, 987.0], [22.3, 988.0], [22.4, 989.0], [22.5, 989.0], [22.6, 990.0], [22.7, 991.0], [22.8, 992.0], [22.9, 993.0], [23.0, 993.0], [23.1, 994.0], [23.2, 996.0], [23.3, 997.0], [23.4, 997.0], [23.5, 998.0], [23.6, 999.0], [23.7, 1000.0], [23.8, 1000.0], [23.9, 1001.0], [24.0, 1001.0], [24.1, 1002.0], [24.2, 1003.0], [24.3, 1003.0], [24.4, 1004.0], [24.5, 1005.0], [24.6, 1005.0], [24.7, 1005.0], [24.8, 1006.0], [24.9, 1006.0], [25.0, 1007.0], [25.1, 1008.0], [25.2, 1008.0], [25.3, 1008.0], [25.4, 1009.0], [25.5, 1009.0], [25.6, 1009.0], [25.7, 1010.0], [25.8, 1010.0], [25.9, 1011.0], [26.0, 1011.0], [26.1, 1012.0], [26.2, 1012.0], [26.3, 1012.0], [26.4, 1013.0], [26.5, 1013.0], [26.6, 1014.0], [26.7, 1014.0], [26.8, 1015.0], [26.9, 1015.0], [27.0, 1015.0], [27.1, 1016.0], [27.2, 1016.0], [27.3, 1017.0], [27.4, 1017.0], [27.5, 1018.0], [27.6, 1018.0], [27.7, 1019.0], [27.8, 1019.0], [27.9, 1019.0], [28.0, 1019.0], [28.1, 1020.0], [28.2, 1020.0], [28.3, 1021.0], [28.4, 1021.0], [28.5, 1021.0], [28.6, 1021.0], [28.7, 1022.0], [28.8, 1022.0], [28.9, 1023.0], [29.0, 1023.0], [29.1, 1023.0], [29.2, 1024.0], [29.3, 1024.0], [29.4, 1025.0], [29.5, 1025.0], [29.6, 1026.0], [29.7, 1026.0], [29.8, 1026.0], [29.9, 1026.0], [30.0, 1027.0], [30.1, 1027.0], [30.2, 1027.0], [30.3, 1027.0], [30.4, 1028.0], [30.5, 1028.0], [30.6, 1028.0], [30.7, 1028.0], [30.8, 1029.0], [30.9, 1029.0], [31.0, 1029.0], [31.1, 1029.0], [31.2, 1030.0], [31.3, 1030.0], [31.4, 1030.0], [31.5, 1031.0], [31.6, 1031.0], [31.7, 1031.0], [31.8, 1031.0], [31.9, 1032.0], [32.0, 1032.0], [32.1, 1032.0], [32.2, 1032.0], [32.3, 1033.0], [32.4, 1033.0], [32.5, 1033.0], [32.6, 1034.0], [32.7, 1034.0], [32.8, 1034.0], [32.9, 1034.0], [33.0, 1035.0], [33.1, 1035.0], [33.2, 1035.0], [33.3, 1035.0], [33.4, 1036.0], [33.5, 1036.0], [33.6, 1036.0], [33.7, 1037.0], [33.8, 1037.0], [33.9, 1037.0], [34.0, 1038.0], [34.1, 1038.0], [34.2, 1038.0], [34.3, 1038.0], [34.4, 1038.0], [34.5, 1038.0], [34.6, 1039.0], [34.7, 1039.0], [34.8, 1039.0], [34.9, 1039.0], [35.0, 1040.0], [35.1, 1040.0], [35.2, 1040.0], [35.3, 1040.0], [35.4, 1040.0], [35.5, 1040.0], [35.6, 1041.0], [35.7, 1041.0], [35.8, 1041.0], [35.9, 1042.0], [36.0, 1042.0], [36.1, 1042.0], [36.2, 1042.0], [36.3, 1043.0], [36.4, 1043.0], [36.5, 1043.0], [36.6, 1044.0], [36.7, 1044.0], [36.8, 1044.0], [36.9, 1044.0], [37.0, 1044.0], [37.1, 1045.0], [37.2, 1045.0], [37.3, 1045.0], [37.4, 1045.0], [37.5, 1045.0], [37.6, 1046.0], [37.7, 1046.0], [37.8, 1046.0], [37.9, 1047.0], [38.0, 1047.0], [38.1, 1047.0], [38.2, 1048.0], [38.3, 1048.0], [38.4, 1048.0], [38.5, 1049.0], [38.6, 1049.0], [38.7, 1049.0], [38.8, 1049.0], [38.9, 1049.0], [39.0, 1050.0], [39.1, 1050.0], [39.2, 1050.0], [39.3, 1051.0], [39.4, 1051.0], [39.5, 1051.0], [39.6, 1051.0], [39.7, 1051.0], [39.8, 1052.0], [39.9, 1052.0], [40.0, 1052.0], [40.1, 1052.0], [40.2, 1053.0], [40.3, 1053.0], [40.4, 1053.0], [40.5, 1053.0], [40.6, 1054.0], [40.7, 1054.0], [40.8, 1054.0], [40.9, 1054.0], [41.0, 1055.0], [41.1, 1055.0], [41.2, 1055.0], [41.3, 1055.0], [41.4, 1056.0], [41.5, 1056.0], [41.6, 1056.0], [41.7, 1057.0], [41.8, 1057.0], [41.9, 1057.0], [42.0, 1057.0], [42.1, 1058.0], [42.2, 1058.0], [42.3, 1058.0], [42.4, 1058.0], [42.5, 1058.0], [42.6, 1059.0], [42.7, 1059.0], [42.8, 1059.0], [42.9, 1059.0], [43.0, 1060.0], [43.1, 1060.0], [43.2, 1060.0], [43.3, 1060.0], [43.4, 1061.0], [43.5, 1061.0], [43.6, 1061.0], [43.7, 1061.0], [43.8, 1062.0], [43.9, 1062.0], [44.0, 1063.0], [44.1, 1063.0], [44.2, 1063.0], [44.3, 1063.0], [44.4, 1063.0], [44.5, 1064.0], [44.6, 1064.0], [44.7, 1064.0], [44.8, 1064.0], [44.9, 1064.0], [45.0, 1065.0], [45.1, 1065.0], [45.2, 1065.0], [45.3, 1066.0], [45.4, 1066.0], [45.5, 1066.0], [45.6, 1066.0], [45.7, 1067.0], [45.8, 1067.0], [45.9, 1067.0], [46.0, 1068.0], [46.1, 1068.0], [46.2, 1068.0], [46.3, 1068.0], [46.4, 1069.0], [46.5, 1069.0], [46.6, 1069.0], [46.7, 1070.0], [46.8, 1070.0], [46.9, 1070.0], [47.0, 1070.0], [47.1, 1071.0], [47.2, 1071.0], [47.3, 1072.0], [47.4, 1072.0], [47.5, 1072.0], [47.6, 1073.0], [47.7, 1073.0], [47.8, 1073.0], [47.9, 1073.0], [48.0, 1074.0], [48.1, 1074.0], [48.2, 1074.0], [48.3, 1074.0], [48.4, 1075.0], [48.5, 1075.0], [48.6, 1075.0], [48.7, 1076.0], [48.8, 1076.0], [48.9, 1076.0], [49.0, 1077.0], [49.1, 1078.0], [49.2, 1078.0], [49.3, 1078.0], [49.4, 1079.0], [49.5, 1079.0], [49.6, 1079.0], [49.7, 1079.0], [49.8, 1080.0], [49.9, 1080.0], [50.0, 1080.0], [50.1, 1081.0], [50.2, 1081.0], [50.3, 1081.0], [50.4, 1082.0], [50.5, 1082.0], [50.6, 1083.0], [50.7, 1083.0], [50.8, 1083.0], [50.9, 1084.0], [51.0, 1084.0], [51.1, 1085.0], [51.2, 1085.0], [51.3, 1085.0], [51.4, 1086.0], [51.5, 1086.0], [51.6, 1087.0], [51.7, 1087.0], [51.8, 1088.0], [51.9, 1088.0], [52.0, 1089.0], [52.1, 1089.0], [52.2, 1090.0], [52.3, 1090.0], [52.4, 1090.0], [52.5, 1091.0], [52.6, 1091.0], [52.7, 1091.0], [52.8, 1092.0], [52.9, 1092.0], [53.0, 1093.0], [53.1, 1093.0], [53.2, 1093.0], [53.3, 1094.0], [53.4, 1094.0], [53.5, 1095.0], [53.6, 1095.0], [53.7, 1096.0], [53.8, 1097.0], [53.9, 1097.0], [54.0, 1098.0], [54.1, 1098.0], [54.2, 1099.0], [54.3, 1099.0], [54.4, 1099.0], [54.5, 1100.0], [54.6, 1101.0], [54.7, 1101.0], [54.8, 1102.0], [54.9, 1103.0], [55.0, 1104.0], [55.1, 1104.0], [55.2, 1105.0], [55.3, 1105.0], [55.4, 1106.0], [55.5, 1107.0], [55.6, 1107.0], [55.7, 1108.0], [55.8, 1109.0], [55.9, 1110.0], [56.0, 1111.0], [56.1, 1111.0], [56.2, 1112.0], [56.3, 1112.0], [56.4, 1113.0], [56.5, 1114.0], [56.6, 1114.0], [56.7, 1116.0], [56.8, 1117.0], [56.9, 1118.0], [57.0, 1120.0], [57.1, 1120.0], [57.2, 1122.0], [57.3, 1124.0], [57.4, 1127.0], [57.5, 1128.0], [57.6, 1130.0], [57.7, 1131.0], [57.8, 1133.0], [57.9, 1134.0], [58.0, 1135.0], [58.1, 1138.0], [58.2, 1140.0], [58.3, 1143.0], [58.4, 1146.0], [58.5, 1149.0], [58.6, 1158.0], [58.7, 1161.0], [58.8, 1166.0], [58.9, 1171.0], [59.0, 1176.0], [59.1, 1185.0], [59.2, 1190.0], [59.3, 1197.0], [59.4, 1201.0], [59.5, 1213.0], [59.6, 1226.0], [59.7, 1229.0], [59.8, 1244.0], [59.9, 1250.0], [60.0, 1256.0], [60.1, 1273.0], [60.2, 1288.0], [60.3, 1300.0], [60.4, 1307.0], [60.5, 1320.0], [60.6, 1331.0], [60.7, 1348.0], [60.8, 1351.0], [60.9, 1362.0], [61.0, 1370.0], [61.1, 1378.0], [61.2, 1394.0], [61.3, 1409.0], [61.4, 1427.0], [61.5, 1445.0], [61.6, 1458.0], [61.7, 1464.0], [61.8, 1476.0], [61.9, 1488.0], [62.0, 1498.0], [62.1, 1513.0], [62.2, 1521.0], [62.3, 1531.0], [62.4, 1536.0], [62.5, 1542.0], [62.6, 1550.0], [62.7, 1557.0], [62.8, 1572.0], [62.9, 1582.0], [63.0, 1592.0], [63.1, 1604.0], [63.2, 1610.0], [63.3, 1616.0], [63.4, 1628.0], [63.5, 1637.0], [63.6, 1650.0], [63.7, 1655.0], [63.8, 1666.0], [63.9, 1673.0], [64.0, 1681.0], [64.1, 1687.0], [64.2, 1689.0], [64.3, 1691.0], [64.4, 1695.0], [64.5, 1698.0], [64.6, 1700.0], [64.7, 1703.0], [64.8, 1705.0], [64.9, 1707.0], [65.0, 1710.0], [65.1, 1713.0], [65.2, 1715.0], [65.3, 1718.0], [65.4, 1720.0], [65.5, 1722.0], [65.6, 1724.0], [65.7, 1726.0], [65.8, 1727.0], [65.9, 1728.0], [66.0, 1731.0], [66.1, 1732.0], [66.2, 1733.0], [66.3, 1736.0], [66.4, 1737.0], [66.5, 1738.0], [66.6, 1740.0], [66.7, 1741.0], [66.8, 1742.0], [66.9, 1743.0], [67.0, 1744.0], [67.1, 1746.0], [67.2, 1749.0], [67.3, 1750.0], [67.4, 1751.0], [67.5, 1752.0], [67.6, 1753.0], [67.7, 1754.0], [67.8, 1755.0], [67.9, 1757.0], [68.0, 1758.0], [68.1, 1760.0], [68.2, 1761.0], [68.3, 1763.0], [68.4, 1765.0], [68.5, 1767.0], [68.6, 1769.0], [68.7, 1771.0], [68.8, 1773.0], [68.9, 1779.0], [69.0, 1780.0], [69.1, 1782.0], [69.2, 1785.0], [69.3, 1787.0], [69.4, 1792.0], [69.5, 1796.0], [69.6, 1801.0], [69.7, 1806.0], [69.8, 1810.0], [69.9, 1823.0], [70.0, 1843.0], [70.1, 1851.0], [70.2, 1857.0], [70.3, 1865.0], [70.4, 1883.0], [70.5, 1898.0], [70.6, 1913.0], [70.7, 1927.0], [70.8, 1936.0], [70.9, 1952.0], [71.0, 1969.0], [71.1, 1991.0], [71.2, 2036.0], [71.3, 2044.0], [71.4, 2059.0], [71.5, 2064.0], [71.6, 2068.0], [71.7, 2072.0], [71.8, 2075.0], [71.9, 2079.0], [72.0, 2084.0], [72.1, 2086.0], [72.2, 2089.0], [72.3, 2092.0], [72.4, 2094.0], [72.5, 2098.0], [72.6, 2102.0], [72.7, 2103.0], [72.8, 2105.0], [72.9, 2106.0], [73.0, 2108.0], [73.1, 2109.0], [73.2, 2112.0], [73.3, 2113.0], [73.4, 2113.0], [73.5, 2118.0], [73.6, 2120.0], [73.7, 2123.0], [73.8, 2124.0], [73.9, 2125.0], [74.0, 2127.0], [74.1, 2129.0], [74.2, 2132.0], [74.3, 2135.0], [74.4, 2139.0], [74.5, 2141.0], [74.6, 2144.0], [74.7, 2147.0], [74.8, 2149.0], [74.9, 2152.0], [75.0, 2154.0], [75.1, 2156.0], [75.2, 2160.0], [75.3, 2163.0], [75.4, 2166.0], [75.5, 2168.0], [75.6, 2171.0], [75.7, 2174.0], [75.8, 2178.0], [75.9, 2182.0], [76.0, 2188.0], [76.1, 2192.0], [76.2, 2196.0], [76.3, 2200.0], [76.4, 2203.0], [76.5, 2205.0], [76.6, 2208.0], [76.7, 2211.0], [76.8, 2215.0], [76.9, 2219.0], [77.0, 2224.0], [77.1, 2226.0], [77.2, 2228.0], [77.3, 2229.0], [77.4, 2233.0], [77.5, 2238.0], [77.6, 2241.0], [77.7, 2248.0], [77.8, 2261.0], [77.9, 2268.0], [78.0, 2275.0], [78.1, 2283.0], [78.2, 2306.0], [78.3, 2322.0], [78.4, 2333.0], [78.5, 2342.0], [78.6, 2354.0], [78.7, 2366.0], [78.8, 2379.0], [78.9, 2392.0], [79.0, 2543.0], [79.1, 2694.0], [79.2, 2755.0], [79.3, 2850.0], [79.4, 2919.0], [79.5, 2946.0], [79.6, 3001.0], [79.7, 3041.0], [79.8, 3080.0], [79.9, 3121.0], [80.0, 3139.0], [80.1, 3175.0], [80.2, 3202.0], [80.3, 3233.0], [80.4, 3255.0], [80.5, 3285.0], [80.6, 3294.0], [80.7, 3325.0], [80.8, 3370.0], [80.9, 3423.0], [81.0, 3457.0], [81.1, 3505.0], [81.2, 3560.0], [81.3, 3603.0], [81.4, 3643.0], [81.5, 3679.0], [81.6, 3728.0], [81.7, 3750.0], [81.8, 3782.0], [81.9, 3830.0], [82.0, 3848.0], [82.1, 3881.0], [82.2, 3919.0], [82.3, 3936.0], [82.4, 3957.0], [82.5, 4004.0], [82.6, 4027.0], [82.7, 4068.0], [82.8, 4094.0], [82.9, 4116.0], [83.0, 4130.0], [83.1, 4159.0], [83.2, 4167.0], [83.3, 4181.0], [83.4, 4195.0], [83.5, 4200.0], [83.6, 4204.0], [83.7, 4211.0], [83.8, 4221.0], [83.9, 4227.0], [84.0, 4236.0], [84.1, 4241.0], [84.2, 4244.0], [84.3, 4248.0], [84.4, 4257.0], [84.5, 4261.0], [84.6, 4266.0], [84.7, 4274.0], [84.8, 4278.0], [84.9, 4283.0], [85.0, 4293.0], [85.1, 4305.0], [85.2, 4316.0], [85.3, 4326.0], [85.4, 4330.0], [85.5, 4347.0], [85.6, 4355.0], [85.7, 4359.0], [85.8, 4370.0], [85.9, 4381.0], [86.0, 4394.0], [86.1, 4405.0], [86.2, 4411.0], [86.3, 4417.0], [86.4, 4422.0], [86.5, 4432.0], [86.6, 4437.0], [86.7, 4440.0], [86.8, 4449.0], [86.9, 4457.0], [87.0, 4465.0], [87.1, 4471.0], [87.2, 4477.0], [87.3, 4482.0], [87.4, 4489.0], [87.5, 4493.0], [87.6, 4496.0], [87.7, 4500.0], [87.8, 4506.0], [87.9, 4509.0], [88.0, 4514.0], [88.1, 4517.0], [88.2, 4520.0], [88.3, 4522.0], [88.4, 4525.0], [88.5, 4530.0], [88.6, 4534.0], [88.7, 4536.0], [88.8, 4539.0], [88.9, 4543.0], [89.0, 4545.0], [89.1, 4548.0], [89.2, 4554.0], [89.3, 4557.0], [89.4, 4558.0], [89.5, 4560.0], [89.6, 4563.0], [89.7, 4567.0], [89.8, 4572.0], [89.9, 4577.0], [90.0, 4579.0], [90.1, 4581.0], [90.2, 4583.0], [90.3, 4592.0], [90.4, 4596.0], [90.5, 4600.0], [90.6, 4606.0], [90.7, 4612.0], [90.8, 4618.0], [90.9, 4622.0], [91.0, 4628.0], [91.1, 4639.0], [91.2, 4649.0], [91.3, 4660.0], [91.4, 4670.0], [91.5, 4675.0], [91.6, 4690.0], [91.7, 4696.0], [91.8, 4716.0], [91.9, 4721.0], [92.0, 4739.0], [92.1, 4778.0], [92.2, 4800.0], [92.3, 4813.0], [92.4, 4838.0], [92.5, 4868.0], [92.6, 4882.0], [92.7, 4899.0], [92.8, 4909.0], [92.9, 4920.0], [93.0, 4937.0], [93.1, 4952.0], [93.2, 4957.0], [93.3, 4966.0], [93.4, 4978.0], [93.5, 4991.0], [93.6, 5002.0], [93.7, 5020.0], [93.8, 5037.0], [93.9, 5063.0], [94.0, 5102.0], [94.1, 5119.0], [94.2, 5140.0], [94.3, 5162.0], [94.4, 5174.0], [94.5, 5179.0], [94.6, 5186.0], [94.7, 5194.0], [94.8, 5198.0], [94.9, 5204.0], [95.0, 5208.0], [95.1, 5212.0], [95.2, 5215.0], [95.3, 5219.0], [95.4, 5221.0], [95.5, 5230.0], [95.6, 5233.0], [95.7, 5239.0], [95.8, 5244.0], [95.9, 5250.0], [96.0, 5254.0], [96.1, 5257.0], [96.2, 5260.0], [96.3, 5263.0], [96.4, 5270.0], [96.5, 5274.0], [96.6, 5282.0], [96.7, 5287.0], [96.8, 5294.0], [96.9, 5299.0], [97.0, 5310.0], [97.1, 5323.0], [97.2, 5334.0], [97.3, 5362.0], [97.4, 5380.0], [97.5, 5392.0], [97.6, 5407.0], [97.7, 5423.0], [97.8, 5454.0], [97.9, 5472.0], [98.0, 5480.0], [98.1, 5492.0], [98.2, 5502.0], [98.3, 5517.0], [98.4, 5536.0], [98.5, 5560.0], [98.6, 5573.0], [98.7, 5582.0], [98.8, 5598.0], [98.9, 5607.0], [99.0, 5616.0], [99.1, 5631.0], [99.2, 5649.0], [99.3, 5666.0], [99.4, 5718.0], [99.5, 5804.0], [99.6, 5957.0], [99.7, 6119.0], [99.8, 6358.0], [99.9, 6786.0], [100.0, 7225.0]], "isOverall": false, "label": "Get Search", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 1868.0, "series": [{"data": [[600.0, 513.0], [700.0, 353.0], [800.0, 121.0], [900.0, 281.0], [1000.0, 1868.0], [1100.0, 302.0], [1200.0, 55.0], [1300.0, 59.0], [1400.0, 45.0], [1500.0, 64.0], [1600.0, 91.0], [1700.0, 302.0], [1800.0, 59.0], [1900.0, 37.0], [2000.0, 88.0], [2100.0, 225.0], [2300.0, 44.0], [2200.0, 116.0], [2400.0, 5.0], [2500.0, 4.0], [2600.0, 3.0], [2700.0, 7.0], [2800.0, 9.0], [2900.0, 13.0], [3000.0, 17.0], [3100.0, 18.0], [3300.0, 13.0], [3200.0, 28.0], [3400.0, 15.0], [3500.0, 13.0], [3700.0, 19.0], [3600.0, 14.0], [3800.0, 17.0], [3900.0, 20.0], [4000.0, 24.0], [4100.0, 39.0], [4200.0, 93.0], [4300.0, 61.0], [4400.0, 100.0], [4600.0, 78.0], [4500.0, 169.0], [4800.0, 31.0], [4700.0, 27.0], [4900.0, 53.0], [5000.0, 25.0], [5100.0, 51.0], [5300.0, 39.0], [5200.0, 126.0], [5400.0, 38.0], [5500.0, 40.0], [5600.0, 32.0], [5700.0, 8.0], [5800.0, 4.0], [5900.0, 4.0], [6000.0, 3.0], [6100.0, 3.0], [6200.0, 4.0], [6300.0, 1.0], [6400.0, 1.0], [6500.0, 1.0], [6600.0, 2.0], [6700.0, 2.0], [6800.0, 1.0], [6900.0, 2.0], [7000.0, 1.0], [7100.0, 1.0], [7200.0, 1.0], [500.0, 166.0]], "isOverall": false, "label": "Get Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2306.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3763.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 3763.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2306.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.69118104E12, "maxY": 30.0, "series": [{"data": [[1.69118236E12, 25.638297872340416], [1.69118104E12, 3.3333333333333335], [1.69118232E12, 15.0], [1.69118138E12, 14.243816254416966], [1.69118108E12, 10.0], [1.69118228E12, 12.578947368421051], [1.69118134E12, 15.0], [1.69118224E12, 10.0], [1.6911813E12, 30.0], [1.6911822E12, 1.0], [1.69118126E12, 15.0], [1.69118254E12, 15.0], [1.69118122E12, 18.222222222222225], [1.6911825E12, 15.0], [1.69118118E12, 15.25263157894737], [1.69118246E12, 30.0], [1.69118114E12, 15.006993006993014], [1.69118242E12, 15.0], [1.6911814E12, 5.256410256410259], [1.69118106E12, 9.444043321299631], [1.69118238E12, 21.942528735632184], [1.69118136E12, 15.0], [1.6911811E12, 10.0], [1.69118234E12, 15.0], [1.69118132E12, 21.66550522648082], [1.6911823E12, 15.428571428571423], [1.69118128E12, 23.028169014084515], [1.69118256E12, 9.5], [1.69118226E12, 10.0], [1.69118124E12, 15.0], [1.69118252E12, 15.0], [1.69118222E12, 9.224489795918366], [1.6911812E12, 25.27368421052632], [1.69118248E12, 26.76635514018691], [1.69118116E12, 15.0], [1.69118244E12, 25.0632911392405], [1.69118112E12, 12.13148788927336], [1.6911824E12, 15.0]], "isOverall": false, "label": "TC5: Spike Testing", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 20000, "maxX": 1.69118256E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 530.8333333333334, "minX": 1.0, "maxY": 6128.185185185185, "series": [{"data": [[2.0, 530.8333333333334], [3.0, 535.0000000000001], [4.0, 541.5333333333334], [5.0, 555.4545454545454], [6.0, 576.3181818181819], [7.0, 591.3125], [8.0, 645.5185185185185], [9.0, 664.4], [10.0, 684.8400447427291], [11.0, 757.7499999999999], [12.0, 836.048780487805], [13.0, 889.0327868852461], [14.0, 959.7380952380951], [15.0, 1093.7054140127395], [16.0, 1186.821428571429], [17.0, 1275.6], [18.0, 1373.45], [19.0, 1445.9032258064517], [20.0, 1542.6499999999999], [21.0, 1545.5454545454545], [22.0, 1628.4333333333334], [23.0, 1793.6333333333334], [24.0, 1793.0666666666666], [25.0, 1763.4542483660134], [26.0, 1892.7142857142858], [27.0, 1954.8666666666663], [28.0, 1964.7777777777776], [29.0, 1834.25], [30.0, 2174.0365296803675], [31.0, 1922.7], [33.0, 1071.0], [32.0, 1060.0], [35.0, 1041.0], [34.0, 1085.5], [37.0, 1043.5], [36.0, 1046.5], [39.0, 1080.0], [38.0, 1055.5], [40.0, 1071.0], [41.0, 1053.0], [43.0, 1061.0], [42.0, 1037.0], [45.0, 1098.0], [44.0, 1062.0], [51.0, 4160.0], [53.0, 4264.0], [52.0, 4318.0], [55.0, 4429.0], [54.0, 4450.0], [57.0, 4514.0], [56.0, 4536.0], [58.0, 2753.5], [59.0, 4565.0], [60.0, 3865.7482993197273], [61.0, 4672.833333333333], [62.0, 4503.000000000001], [63.0, 4563.125000000001], [64.0, 4745.8], [66.0, 4830.0], [67.0, 4681.5], [65.0, 4531.71641791045], [71.0, 4997.852459016393], [70.0, 3858.423076923077], [69.0, 4553.656249999999], [68.0, 4325.0], [72.0, 4710.952380952381], [73.0, 4866.571428571429], [74.0, 4597.733333333333], [75.0, 4820.620938628153], [76.0, 4632.306818181817], [77.0, 4705.545454545455], [78.0, 5057.6], [79.0, 4826.0], [83.0, 4745.833333333333], [82.0, 4093.0], [81.0, 4448.333333333333], [80.0, 3521.245614035087], [87.0, 4975.090909090909], [86.0, 4930.0], [85.0, 4978.942857142859], [84.0, 4810.0], [91.0, 5433.666666666666], [90.0, 5639.809523809524], [89.0, 5376.714285714285], [88.0, 5306.555555555556], [95.0, 6128.185185185185], [94.0, 3074.0], [92.0, 5225.826086956521], [93.0, 5592.166666666666], [98.0, 3592.0], [99.0, 3521.4], [97.0, 5421.0], [96.0, 5522.0], [102.0, 3677.5], [103.0, 3727.6666666666665], [100.0, 3906.0], [101.0, 5444.0], [106.0, 3587.3333333333335], [107.0, 3257.777777777778], [104.0, 3756.6666666666665], [105.0, 5149.0], [108.0, 3814.5], [109.0, 3997.0], [110.0, 5151.0], [1.0, 571.6666666666666]], "isOverall": false, "label": "Get Search", "isController": false}, {"data": [[28.380128521997005, 1883.9711649365636]], "isOverall": false, "label": "Get Search-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 110.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 23.35, "minX": 1.69118104E12, "maxY": 114958.55, "series": [{"data": [[1.69118236E12, 36880.9], [1.69118104E12, 7062.3], [1.69118232E12, 26287.45], [1.69118138E12, 111035.05], [1.69118108E12, 114958.55], [1.69118228E12, 22363.95], [1.69118134E12, 109073.3], [1.69118224E12, 23541.0], [1.6911813E12, 106262.4], [1.6911822E12, 392.35], [1.69118126E12, 112604.45], [1.69118254E12, 25502.75], [1.69118122E12, 113089.1], [1.6911825E12, 28249.2], [1.69118118E12, 111819.75], [1.69118246E12, 47082.0], [1.69118114E12, 112212.1], [1.69118242E12, 26287.45], [1.6911814E12, 15301.65], [1.69118106E12, 108680.95], [1.69118238E12, 34134.45], [1.69118136E12, 75723.55], [1.6911811E12, 114173.85], [1.69118234E12, 22363.95], [1.69118132E12, 112604.45], [1.6911823E12, 27464.5], [1.69118128E12, 111427.4], [1.69118256E12, 8631.7], [1.69118226E12, 23148.65], [1.69118124E12, 111819.75], [1.69118252E12, 25895.1], [1.69118222E12, 19225.15], [1.6911812E12, 111819.75], [1.69118248E12, 41981.45], [1.69118116E12, 112212.1], [1.69118244E12, 30995.65], [1.69118112E12, 113389.15], [1.6911824E12, 25502.75]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69118236E12, 2194.9], [1.69118104E12, 420.3], [1.69118232E12, 1564.45], [1.69118138E12, 6608.05], [1.69118108E12, 6841.55], [1.69118228E12, 1330.95], [1.69118134E12, 6491.3], [1.69118224E12, 1401.0], [1.6911813E12, 6327.85], [1.6911822E12, 23.35], [1.69118126E12, 6701.45], [1.69118254E12, 1517.75], [1.69118122E12, 6724.8], [1.6911825E12, 1681.2], [1.69118118E12, 6654.75], [1.69118246E12, 2802.0], [1.69118114E12, 6678.1], [1.69118242E12, 1564.45], [1.6911814E12, 910.65], [1.69118106E12, 6467.95], [1.69118238E12, 2031.45], [1.69118136E12, 4506.55], [1.6911811E12, 6794.85], [1.69118234E12, 1330.95], [1.69118132E12, 6701.45], [1.6911823E12, 1634.5], [1.69118128E12, 6631.4], [1.69118256E12, 513.7], [1.69118226E12, 1377.65], [1.69118124E12, 6654.75], [1.69118252E12, 1541.1], [1.69118222E12, 1144.15], [1.6911812E12, 6654.75], [1.69118248E12, 2498.45], [1.69118116E12, 6678.1], [1.69118244E12, 1844.65], [1.69118112E12, 6748.15], [1.6911824E12, 1517.75]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 20000, "maxX": 1.69118256E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 535.5000000000001, "minX": 1.69118104E12, "maxY": 5741.457446808509, "series": [{"data": [[1.69118236E12, 5741.457446808509], [1.69118104E12, 535.5000000000001], [1.69118232E12, 4428.701492537312], [1.69118138E12, 1061.3957597173144], [1.69118108E12, 684.4812286689416], [1.69118228E12, 4053.4736842105262], [1.69118134E12, 1079.341726618706], [1.69118224E12, 3313.4999999999995], [1.6911813E12, 2214.0627306273063], [1.6911822E12, 895.0], [1.69118126E12, 1045.2229965156787], [1.69118254E12, 4559.800000000003], [1.69118122E12, 1315.3576388888882], [1.6911825E12, 4290.291666666668], [1.69118118E12, 1050.5929824561413], [1.69118246E12, 5159.324999999998], [1.69118114E12, 1048.5489510489506], [1.69118242E12, 4731.194029850744], [1.6911814E12, 598.0000000000001], [1.69118106E12, 664.8483754512637], [1.69118238E12, 5052.862068965519], [1.69118136E12, 1507.689119170985], [1.6911811E12, 684.9140893470789], [1.69118234E12, 4994.40350877193], [1.69118132E12, 1594.1324041811854], [1.6911823E12, 4457.357142857145], [1.69118128E12, 1534.0915492957736], [1.69118256E12, 4538.181818181818], [1.69118226E12, 3386.457627118643], [1.69118124E12, 1051.8035087719302], [1.69118252E12, 4430.439393939392], [1.69118222E12, 3280.7142857142867], [1.6911812E12, 1733.438596491228], [1.69118248E12, 5220.663551401868], [1.69118116E12, 1053.8811188811183], [1.69118244E12, 4795.430379746835], [1.69118112E12, 818.7058823529414], [1.6911824E12, 4418.046153846156]], "isOverall": false, "label": "Get Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 20000, "maxX": 1.69118256E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 535.388888888889, "minX": 1.69118104E12, "maxY": 5741.276595744681, "series": [{"data": [[1.69118236E12, 5741.276595744681], [1.69118104E12, 535.388888888889], [1.69118232E12, 4428.507462686566], [1.69118138E12, 1061.2226148409904], [1.69118108E12, 684.3310580204782], [1.69118228E12, 4053.333333333334], [1.69118134E12, 1079.1762589928067], [1.69118224E12, 3313.3166666666666], [1.6911813E12, 2213.9188191881935], [1.6911822E12, 895.0], [1.69118126E12, 1045.0905923344947], [1.69118254E12, 4559.553846153847], [1.69118122E12, 1315.208333333333], [1.6911825E12, 4290.125000000002], [1.69118118E12, 1050.4666666666662], [1.69118246E12, 5159.166666666668], [1.69118114E12, 1048.4475524475522], [1.69118242E12, 4731.014925373134], [1.6911814E12, 597.7948717948717], [1.69118106E12, 664.7328519855596], [1.69118238E12, 5052.678160919539], [1.69118136E12, 1507.5181347150258], [1.6911811E12, 684.7560137457049], [1.69118234E12, 4994.280701754387], [1.69118132E12, 1593.9581881533102], [1.6911823E12, 4457.171428571431], [1.69118128E12, 1533.9154929577464], [1.69118256E12, 4538.045454545454], [1.69118226E12, 3386.3050847457616], [1.69118124E12, 1051.6315789473679], [1.69118252E12, 4430.227272727273], [1.69118222E12, 3280.530612244899], [1.6911812E12, 1733.2877192982444], [1.69118248E12, 5220.551401869157], [1.69118116E12, 1053.7027972027972], [1.69118244E12, 4795.303797468354], [1.69118112E12, 818.5709342560552], [1.6911824E12, 4417.861538461537]], "isOverall": false, "label": "Get Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 20000, "maxX": 1.69118256E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 227.9090909090909, "minX": 1.69118104E12, "maxY": 253.0, "series": [{"data": [[1.69118236E12, 231.5744680851065], [1.69118104E12, 231.05555555555554], [1.69118232E12, 230.34328358208964], [1.69118138E12, 233.6042402826855], [1.69118108E12, 231.6825938566554], [1.69118228E12, 230.0701754385965], [1.69118134E12, 230.91007194244605], [1.69118224E12, 232.7], [1.6911813E12, 230.75276752767525], [1.6911822E12, 253.0], [1.69118126E12, 230.2264808362369], [1.69118254E12, 228.67692307692306], [1.69118122E12, 231.5069444444444], [1.6911825E12, 229.50000000000003], [1.69118118E12, 231.68771929824564], [1.69118246E12, 234.46666666666664], [1.69118114E12, 232.06293706293712], [1.69118242E12, 237.61194029850745], [1.6911814E12, 233.15384615384616], [1.69118106E12, 230.6787003610108], [1.69118238E12, 231.65517241379305], [1.69118136E12, 250.06217616580324], [1.6911811E12, 230.512027491409], [1.69118234E12, 232.59649122807016], [1.69118132E12, 231.7351916376306], [1.6911823E12, 229.8428571428571], [1.69118128E12, 231.39084507042276], [1.69118256E12, 227.9090909090909], [1.69118226E12, 230.42372881355928], [1.69118124E12, 230.1824561403509], [1.69118252E12, 231.49999999999994], [1.69118222E12, 249.91836734693874], [1.6911812E12, 231.29473684210532], [1.69118248E12, 232.59813084112156], [1.69118116E12, 231.1188811188811], [1.69118244E12, 229.73417721518987], [1.69118112E12, 231.26989619377176], [1.6911824E12, 233.38461538461533]], "isOverall": false, "label": "Get Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 20000, "maxX": 1.69118256E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 520.0, "minX": 1.69118104E12, "maxY": 7225.0, "series": [{"data": [[1.69118236E12, 7225.0], [1.69118104E12, 621.0], [1.69118232E12, 4699.0], [1.69118138E12, 2162.0], [1.69118108E12, 860.0], [1.69118228E12, 4454.0], [1.69118134E12, 1375.0], [1.69118224E12, 3912.0], [1.6911813E12, 2413.0], [1.6911822E12, 895.0], [1.69118126E12, 1242.0], [1.69118254E12, 4639.0], [1.69118122E12, 1854.0], [1.6911825E12, 4673.0], [1.69118118E12, 1189.0], [1.69118246E12, 5334.0], [1.69118114E12, 1142.0], [1.69118242E12, 5070.0], [1.6911814E12, 790.0], [1.69118106E12, 861.0], [1.69118238E12, 5912.0], [1.69118136E12, 2283.0], [1.6911811E12, 931.0], [1.69118234E12, 5831.0], [1.69118132E12, 2229.0], [1.6911823E12, 4806.0], [1.69118128E12, 3154.0], [1.69118256E12, 4695.0], [1.69118226E12, 3773.0], [1.69118124E12, 1159.0], [1.69118252E12, 4591.0], [1.69118222E12, 4096.0], [1.6911812E12, 2797.0], [1.69118248E12, 5583.0], [1.69118116E12, 1147.0], [1.69118244E12, 6296.0], [1.69118112E12, 1133.0], [1.6911824E12, 4883.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69118236E12, 5020.0], [1.69118104E12, 520.0], [1.69118232E12, 3920.0], [1.69118138E12, 595.0], [1.69118108E12, 528.0], [1.69118228E12, 3631.0], [1.69118134E12, 955.0], [1.69118224E12, 2839.0], [1.6911813E12, 2056.0], [1.6911822E12, 895.0], [1.69118126E12, 950.0], [1.69118254E12, 4481.0], [1.69118122E12, 920.0], [1.6911825E12, 4153.0], [1.69118118E12, 944.0], [1.69118246E12, 4897.0], [1.69118114E12, 904.0], [1.69118242E12, 4353.0], [1.6911814E12, 523.0], [1.69118106E12, 520.0], [1.69118238E12, 3787.0], [1.69118136E12, 803.0], [1.6911811E12, 531.0], [1.69118234E12, 4180.0], [1.69118132E12, 944.0], [1.6911823E12, 4134.0], [1.69118128E12, 985.0], [1.69118256E12, 4160.0], [1.69118226E12, 3124.0], [1.69118124E12, 950.0], [1.69118252E12, 4181.0], [1.69118222E12, 1930.0], [1.6911812E12, 1044.0], [1.69118248E12, 4370.0], [1.69118116E12, 961.0], [1.69118244E12, 4279.0], [1.69118112E12, 571.0], [1.6911824E12, 3724.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69118236E12, 6651.0], [1.69118104E12, 552.6000000000001], [1.69118232E12, 4616.8], [1.69118138E12, 1121.2], [1.69118108E12, 775.6], [1.69118228E12, 4280.8], [1.69118134E12, 1163.2], [1.69118224E12, 3823.8], [1.6911813E12, 2340.4], [1.6911822E12, 895.0], [1.69118126E12, 1100.4], [1.69118254E12, 4612.0], [1.69118122E12, 1743.6000000000001], [1.6911825E12, 4497.0], [1.69118118E12, 1105.0], [1.69118246E12, 5282.0], [1.69118114E12, 1090.3], [1.69118242E12, 4910.0], [1.6911814E12, 725.0], [1.69118106E12, 771.0], [1.69118238E12, 5517.4], [1.69118136E12, 1934.8], [1.6911811E12, 769.6], [1.69118234E12, 5647.4], [1.69118132E12, 2116.4], [1.6911823E12, 4621.5], [1.69118128E12, 2142.0], [1.69118256E12, 4653.4], [1.69118226E12, 3599.0], [1.69118124E12, 1098.0], [1.69118252E12, 4561.4], [1.69118222E12, 3990.0], [1.6911812E12, 1796.0], [1.69118248E12, 5470.4], [1.69118116E12, 1098.3], [1.69118244E12, 5777.0], [1.69118112E12, 990.0], [1.6911824E12, 4723.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69118236E12, 7225.0], [1.69118104E12, 621.0], [1.69118232E12, 4699.0], [1.69118138E12, 2149.96], [1.69118108E12, 859.0], [1.69118228E12, 4454.0], [1.69118134E12, 1348.05], [1.69118224E12, 3912.0], [1.6911813E12, 2395.08], [1.6911822E12, 895.0], [1.69118126E12, 1214.68], [1.69118254E12, 4639.0], [1.69118122E12, 1785.22], [1.6911825E12, 4673.0], [1.69118118E12, 1151.8199999999997], [1.69118246E12, 5329.8], [1.69118114E12, 1133.65], [1.69118242E12, 5070.0], [1.6911814E12, 790.0], [1.69118106E12, 848.22], [1.69118238E12, 5912.0], [1.69118136E12, 2204.04], [1.6911811E12, 867.3599999999993], [1.69118234E12, 5831.0], [1.69118132E12, 2210.16], [1.6911823E12, 4806.0], [1.69118128E12, 3015.3999999999983], [1.69118256E12, 4695.0], [1.69118226E12, 3773.0], [1.69118124E12, 1135.6999999999998], [1.69118252E12, 4591.0], [1.69118222E12, 4096.0], [1.6911812E12, 2683.2599999999993], [1.69118248E12, 5581.16], [1.69118116E12, 1135.52], [1.69118244E12, 6296.0], [1.69118112E12, 1111.1000000000004], [1.6911824E12, 4883.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69118236E12, 5607.5], [1.69118104E12, 531.0], [1.69118232E12, 4436.0], [1.69118138E12, 1049.0], [1.69118108E12, 681.0], [1.69118228E12, 4087.0], [1.69118134E12, 1060.5], [1.69118224E12, 3198.5], [1.6911813E12, 2206.0], [1.6911822E12, 895.0], [1.69118126E12, 1041.0], [1.69118254E12, 4559.0], [1.69118122E12, 1198.5], [1.6911825E12, 4262.0], [1.69118118E12, 1048.0], [1.69118246E12, 5214.5], [1.69118114E12, 1053.0], [1.69118242E12, 4739.0], [1.6911814E12, 573.0], [1.69118106E12, 667.0], [1.69118238E12, 5229.0], [1.69118136E12, 1582.0], [1.6911811E12, 683.0], [1.69118234E12, 4970.0], [1.69118132E12, 1613.0], [1.6911823E12, 4468.5], [1.69118128E12, 1093.5], [1.69118256E12, 4582.5], [1.69118226E12, 3370.0], [1.69118124E12, 1053.0], [1.69118252E12, 4509.0], [1.69118222E12, 3130.0], [1.6911812E12, 1742.0], [1.69118248E12, 5255.0], [1.69118116E12, 1053.0], [1.69118244E12, 4572.0], [1.69118112E12, 807.0], [1.6911824E12, 4532.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.69118236E12, 6945.25], [1.69118104E12, 621.0], [1.69118232E12, 4663.4], [1.69118138E12, 1243.2000000000003], [1.69118108E12, 800.3], [1.69118228E12, 4435.4], [1.69118134E12, 1269.5], [1.69118224E12, 3870.25], [1.6911813E12, 2364.2], [1.6911822E12, 895.0], [1.69118126E12, 1136.5999999999997], [1.69118254E12, 4624.8], [1.69118122E12, 1762.0], [1.6911825E12, 4588.7], [1.69118118E12, 1112.7], [1.69118246E12, 5288.95], [1.69118114E12, 1108.3], [1.69118242E12, 4963.799999999999], [1.6911814E12, 766.0], [1.69118106E12, 817.0999999999999], [1.69118238E12, 5591.599999999999], [1.69118136E12, 1974.5], [1.6911811E12, 796.9999999999999], [1.69118234E12, 5669.4], [1.69118132E12, 2153.3999999999996], [1.6911823E12, 4670.8], [1.69118128E12, 2243.5], [1.69118256E12, 4688.85], [1.69118226E12, 3642.0], [1.69118124E12, 1105.4], [1.69118252E12, 4578.3], [1.69118222E12, 4070.5], [1.6911812E12, 1868.5999999999995], [1.69118248E12, 5508.4], [1.69118116E12, 1115.0], [1.69118244E12, 6111.0], [1.69118112E12, 1034.5], [1.6911824E12, 4801.7]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 20000, "maxX": 1.69118256E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 893.0, "minX": 1.0, "maxY": 4654.0, "series": [{"data": [[2.0, 4374.0], [8.0, 4654.0], [9.0, 1552.0], [10.0, 1210.0], [11.0, 1605.0], [3.0, 4327.5], [12.0, 2160.5], [13.0, 1091.0], [14.0, 1060.0], [15.0, 1038.0], [16.0, 893.0], [4.0, 4454.0], [1.0, 4595.0], [5.0, 4545.0], [6.0, 4489.0], [7.0, 4433.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 16.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 893.0, "minX": 1.0, "maxY": 4654.0, "series": [{"data": [[2.0, 4374.0], [8.0, 4654.0], [9.0, 1551.5], [10.0, 1210.0], [11.0, 1604.0], [3.0, 4327.5], [12.0, 2160.5], [13.0, 1091.0], [14.0, 1060.0], [15.0, 1037.5], [16.0, 893.0], [4.0, 4454.0], [1.0, 4595.0], [5.0, 4545.0], [6.0, 4489.0], [7.0, 4433.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 16.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.69118104E12, "maxY": 15.35, "series": [{"data": [[1.69118236E12, 5.2], [1.69118104E12, 1.15], [1.69118232E12, 3.35], [1.69118138E12, 13.8], [1.69118108E12, 14.65], [1.69118228E12, 3.15], [1.69118134E12, 13.9], [1.69118224E12, 3.0], [1.6911813E12, 13.55], [1.6911822E12, 0.2], [1.69118126E12, 14.35], [1.69118254E12, 3.25], [1.69118122E12, 13.9], [1.6911825E12, 3.6], [1.69118118E12, 15.35], [1.69118246E12, 6.0], [1.69118114E12, 14.25], [1.69118242E12, 3.35], [1.6911814E12, 1.55], [1.69118106E12, 14.1], [1.69118238E12, 3.85], [1.69118136E12, 9.65], [1.6911811E12, 14.55], [1.69118234E12, 2.85], [1.69118132E12, 13.6], [1.6911823E12, 3.45], [1.69118128E12, 14.95], [1.69118256E12, 0.35], [1.69118226E12, 2.95], [1.69118124E12, 14.25], [1.69118252E12, 3.3], [1.69118222E12, 2.8], [1.6911812E12, 13.65], [1.69118248E12, 4.6], [1.69118116E12, 14.3], [1.69118244E12, 4.7], [1.69118112E12, 14.75], [1.6911824E12, 3.25]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 20000, "maxX": 1.69118256E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.69118104E12, "maxY": 14.65, "series": [{"data": [[1.69118236E12, 4.7], [1.69118104E12, 0.9], [1.69118232E12, 3.35], [1.69118138E12, 14.15], [1.69118108E12, 14.65], [1.69118228E12, 2.85], [1.69118134E12, 13.9], [1.69118224E12, 3.0], [1.6911813E12, 13.55], [1.6911822E12, 0.05], [1.69118126E12, 14.35], [1.69118254E12, 3.25], [1.69118122E12, 14.4], [1.6911825E12, 3.6], [1.69118118E12, 14.25], [1.69118246E12, 6.0], [1.69118114E12, 14.3], [1.69118242E12, 3.35], [1.6911814E12, 1.95], [1.69118106E12, 13.85], [1.69118238E12, 4.35], [1.69118136E12, 9.65], [1.6911811E12, 14.55], [1.69118234E12, 2.85], [1.69118132E12, 14.35], [1.6911823E12, 3.5], [1.69118128E12, 14.2], [1.69118256E12, 1.1], [1.69118226E12, 2.95], [1.69118124E12, 14.25], [1.69118252E12, 3.3], [1.69118222E12, 2.45], [1.6911812E12, 14.25], [1.69118248E12, 5.35], [1.69118116E12, 14.3], [1.69118244E12, 3.95], [1.69118112E12, 14.45], [1.6911824E12, 3.25]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 20000, "maxX": 1.69118256E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.69118104E12, "maxY": 14.65, "series": [{"data": [[1.69118236E12, 4.7], [1.69118104E12, 0.9], [1.69118232E12, 3.35], [1.69118138E12, 14.15], [1.69118108E12, 14.65], [1.69118228E12, 2.85], [1.69118134E12, 13.9], [1.69118224E12, 3.0], [1.6911813E12, 13.55], [1.6911822E12, 0.05], [1.69118126E12, 14.35], [1.69118254E12, 3.25], [1.69118122E12, 14.4], [1.6911825E12, 3.6], [1.69118118E12, 14.25], [1.69118246E12, 6.0], [1.69118114E12, 14.3], [1.69118242E12, 3.35], [1.6911814E12, 1.95], [1.69118106E12, 13.85], [1.69118238E12, 4.35], [1.69118136E12, 9.65], [1.6911811E12, 14.55], [1.69118234E12, 2.85], [1.69118132E12, 14.35], [1.6911823E12, 3.5], [1.69118128E12, 14.2], [1.69118256E12, 1.1], [1.69118226E12, 2.95], [1.69118124E12, 14.25], [1.69118252E12, 3.3], [1.69118222E12, 2.45], [1.6911812E12, 14.25], [1.69118248E12, 5.35], [1.69118116E12, 14.3], [1.69118244E12, 3.95], [1.69118112E12, 14.45], [1.6911824E12, 3.25]], "isOverall": false, "label": "Get Search-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 20000, "maxX": 1.69118256E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.69118104E12, "maxY": 14.65, "series": [{"data": [[1.69118236E12, 4.7], [1.69118104E12, 0.9], [1.69118232E12, 3.35], [1.69118138E12, 14.15], [1.69118108E12, 14.65], [1.69118228E12, 2.85], [1.69118134E12, 13.9], [1.69118224E12, 3.0], [1.6911813E12, 13.55], [1.6911822E12, 0.05], [1.69118126E12, 14.35], [1.69118254E12, 3.25], [1.69118122E12, 14.4], [1.6911825E12, 3.6], [1.69118118E12, 14.25], [1.69118246E12, 6.0], [1.69118114E12, 14.3], [1.69118242E12, 3.35], [1.6911814E12, 1.95], [1.69118106E12, 13.85], [1.69118238E12, 4.35], [1.69118136E12, 9.65], [1.6911811E12, 14.55], [1.69118234E12, 2.85], [1.69118132E12, 14.35], [1.6911823E12, 3.5], [1.69118128E12, 14.2], [1.69118256E12, 1.1], [1.69118226E12, 2.95], [1.69118124E12, 14.25], [1.69118252E12, 3.3], [1.69118222E12, 2.45], [1.6911812E12, 14.25], [1.69118248E12, 5.35], [1.69118116E12, 14.3], [1.69118244E12, 3.95], [1.69118112E12, 14.45], [1.6911824E12, 3.25]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 20000, "maxX": 1.69118256E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

