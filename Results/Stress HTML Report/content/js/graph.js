/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 517.0, "minX": 0.0, "maxY": 7094.0, "series": [{"data": [[0.0, 517.0], [0.1, 521.0], [0.2, 522.0], [0.3, 523.0], [0.4, 523.0], [0.5, 524.0], [0.6, 524.0], [0.7, 525.0], [0.8, 525.0], [0.9, 526.0], [1.0, 526.0], [1.1, 527.0], [1.2, 527.0], [1.3, 527.0], [1.4, 528.0], [1.5, 528.0], [1.6, 529.0], [1.7, 529.0], [1.8, 530.0], [1.9, 530.0], [2.0, 530.0], [2.1, 531.0], [2.2, 531.0], [2.3, 531.0], [2.4, 532.0], [2.5, 532.0], [2.6, 533.0], [2.7, 533.0], [2.8, 533.0], [2.9, 534.0], [3.0, 534.0], [3.1, 535.0], [3.2, 535.0], [3.3, 536.0], [3.4, 536.0], [3.5, 537.0], [3.6, 537.0], [3.7, 538.0], [3.8, 538.0], [3.9, 539.0], [4.0, 539.0], [4.1, 540.0], [4.2, 540.0], [4.3, 541.0], [4.4, 541.0], [4.5, 542.0], [4.6, 543.0], [4.7, 543.0], [4.8, 544.0], [4.9, 545.0], [5.0, 545.0], [5.1, 546.0], [5.2, 546.0], [5.3, 546.0], [5.4, 547.0], [5.5, 548.0], [5.6, 549.0], [5.7, 549.0], [5.8, 550.0], [5.9, 551.0], [6.0, 552.0], [6.1, 552.0], [6.2, 553.0], [6.3, 554.0], [6.4, 554.0], [6.5, 555.0], [6.6, 555.0], [6.7, 556.0], [6.8, 557.0], [6.9, 557.0], [7.0, 558.0], [7.1, 559.0], [7.2, 560.0], [7.3, 561.0], [7.4, 562.0], [7.5, 563.0], [7.6, 563.0], [7.7, 564.0], [7.8, 565.0], [7.9, 566.0], [8.0, 567.0], [8.1, 567.0], [8.2, 568.0], [8.3, 570.0], [8.4, 571.0], [8.5, 571.0], [8.6, 572.0], [8.7, 574.0], [8.8, 575.0], [8.9, 576.0], [9.0, 577.0], [9.1, 578.0], [9.2, 580.0], [9.3, 581.0], [9.4, 583.0], [9.5, 584.0], [9.6, 586.0], [9.7, 588.0], [9.8, 590.0], [9.9, 591.0], [10.0, 592.0], [10.1, 594.0], [10.2, 596.0], [10.3, 598.0], [10.4, 600.0], [10.5, 602.0], [10.6, 603.0], [10.7, 605.0], [10.8, 606.0], [10.9, 607.0], [11.0, 608.0], [11.1, 610.0], [11.2, 611.0], [11.3, 613.0], [11.4, 614.0], [11.5, 616.0], [11.6, 618.0], [11.7, 620.0], [11.8, 622.0], [11.9, 623.0], [12.0, 624.0], [12.1, 625.0], [12.2, 627.0], [12.3, 628.0], [12.4, 630.0], [12.5, 630.0], [12.6, 632.0], [12.7, 633.0], [12.8, 635.0], [12.9, 636.0], [13.0, 638.0], [13.1, 638.0], [13.2, 640.0], [13.3, 642.0], [13.4, 642.0], [13.5, 643.0], [13.6, 644.0], [13.7, 645.0], [13.8, 646.0], [13.9, 647.0], [14.0, 649.0], [14.1, 650.0], [14.2, 651.0], [14.3, 652.0], [14.4, 653.0], [14.5, 654.0], [14.6, 655.0], [14.7, 656.0], [14.8, 657.0], [14.9, 659.0], [15.0, 659.0], [15.1, 662.0], [15.2, 663.0], [15.3, 664.0], [15.4, 665.0], [15.5, 667.0], [15.6, 668.0], [15.7, 669.0], [15.8, 669.0], [15.9, 670.0], [16.0, 671.0], [16.1, 672.0], [16.2, 673.0], [16.3, 675.0], [16.4, 676.0], [16.5, 677.0], [16.6, 678.0], [16.7, 679.0], [16.8, 680.0], [16.9, 681.0], [17.0, 682.0], [17.1, 684.0], [17.2, 684.0], [17.3, 685.0], [17.4, 686.0], [17.5, 688.0], [17.6, 689.0], [17.7, 690.0], [17.8, 692.0], [17.9, 693.0], [18.0, 694.0], [18.1, 695.0], [18.2, 696.0], [18.3, 697.0], [18.4, 698.0], [18.5, 699.0], [18.6, 700.0], [18.7, 701.0], [18.8, 701.0], [18.9, 702.0], [19.0, 703.0], [19.1, 704.0], [19.2, 705.0], [19.3, 706.0], [19.4, 707.0], [19.5, 708.0], [19.6, 710.0], [19.7, 711.0], [19.8, 712.0], [19.9, 713.0], [20.0, 714.0], [20.1, 715.0], [20.2, 716.0], [20.3, 717.0], [20.4, 718.0], [20.5, 719.0], [20.6, 721.0], [20.7, 722.0], [20.8, 723.0], [20.9, 725.0], [21.0, 726.0], [21.1, 727.0], [21.2, 728.0], [21.3, 730.0], [21.4, 732.0], [21.5, 733.0], [21.6, 733.0], [21.7, 735.0], [21.8, 737.0], [21.9, 739.0], [22.0, 740.0], [22.1, 741.0], [22.2, 744.0], [22.3, 747.0], [22.4, 748.0], [22.5, 750.0], [22.6, 752.0], [22.7, 754.0], [22.8, 758.0], [22.9, 760.0], [23.0, 762.0], [23.1, 764.0], [23.2, 768.0], [23.3, 771.0], [23.4, 773.0], [23.5, 776.0], [23.6, 779.0], [23.7, 784.0], [23.8, 788.0], [23.9, 793.0], [24.0, 799.0], [24.1, 808.0], [24.2, 815.0], [24.3, 823.0], [24.4, 832.0], [24.5, 843.0], [24.6, 861.0], [24.7, 886.0], [24.8, 905.0], [24.9, 929.0], [25.0, 941.0], [25.1, 955.0], [25.2, 966.0], [25.3, 970.0], [25.4, 975.0], [25.5, 978.0], [25.6, 981.0], [25.7, 984.0], [25.8, 988.0], [25.9, 990.0], [26.0, 992.0], [26.1, 994.0], [26.2, 996.0], [26.3, 998.0], [26.4, 999.0], [26.5, 1000.0], [26.6, 1002.0], [26.7, 1003.0], [26.8, 1005.0], [26.9, 1006.0], [27.0, 1007.0], [27.1, 1009.0], [27.2, 1010.0], [27.3, 1011.0], [27.4, 1012.0], [27.5, 1012.0], [27.6, 1014.0], [27.7, 1015.0], [27.8, 1016.0], [27.9, 1017.0], [28.0, 1017.0], [28.1, 1018.0], [28.2, 1019.0], [28.3, 1020.0], [28.4, 1021.0], [28.5, 1022.0], [28.6, 1022.0], [28.7, 1023.0], [28.8, 1024.0], [28.9, 1025.0], [29.0, 1026.0], [29.1, 1027.0], [29.2, 1027.0], [29.3, 1028.0], [29.4, 1029.0], [29.5, 1029.0], [29.6, 1030.0], [29.7, 1031.0], [29.8, 1031.0], [29.9, 1032.0], [30.0, 1032.0], [30.1, 1033.0], [30.2, 1034.0], [30.3, 1034.0], [30.4, 1035.0], [30.5, 1035.0], [30.6, 1036.0], [30.7, 1036.0], [30.8, 1037.0], [30.9, 1037.0], [31.0, 1038.0], [31.1, 1039.0], [31.2, 1040.0], [31.3, 1040.0], [31.4, 1041.0], [31.5, 1041.0], [31.6, 1042.0], [31.7, 1042.0], [31.8, 1043.0], [31.9, 1043.0], [32.0, 1044.0], [32.1, 1044.0], [32.2, 1045.0], [32.3, 1046.0], [32.4, 1046.0], [32.5, 1047.0], [32.6, 1048.0], [32.7, 1048.0], [32.8, 1049.0], [32.9, 1049.0], [33.0, 1050.0], [33.1, 1050.0], [33.2, 1051.0], [33.3, 1052.0], [33.4, 1053.0], [33.5, 1053.0], [33.6, 1054.0], [33.7, 1054.0], [33.8, 1055.0], [33.9, 1056.0], [34.0, 1056.0], [34.1, 1057.0], [34.2, 1058.0], [34.3, 1058.0], [34.4, 1059.0], [34.5, 1060.0], [34.6, 1061.0], [34.7, 1061.0], [34.8, 1062.0], [34.9, 1062.0], [35.0, 1063.0], [35.1, 1064.0], [35.2, 1065.0], [35.3, 1065.0], [35.4, 1066.0], [35.5, 1067.0], [35.6, 1068.0], [35.7, 1069.0], [35.8, 1070.0], [35.9, 1070.0], [36.0, 1071.0], [36.1, 1072.0], [36.2, 1072.0], [36.3, 1074.0], [36.4, 1075.0], [36.5, 1075.0], [36.6, 1076.0], [36.7, 1077.0], [36.8, 1078.0], [36.9, 1079.0], [37.0, 1080.0], [37.1, 1082.0], [37.2, 1082.0], [37.3, 1084.0], [37.4, 1085.0], [37.5, 1085.0], [37.6, 1086.0], [37.7, 1088.0], [37.8, 1089.0], [37.9, 1090.0], [38.0, 1092.0], [38.1, 1093.0], [38.2, 1094.0], [38.3, 1096.0], [38.4, 1098.0], [38.5, 1100.0], [38.6, 1102.0], [38.7, 1104.0], [38.8, 1106.0], [38.9, 1108.0], [39.0, 1111.0], [39.1, 1114.0], [39.2, 1117.0], [39.3, 1119.0], [39.4, 1124.0], [39.5, 1130.0], [39.6, 1137.0], [39.7, 1146.0], [39.8, 1156.0], [39.9, 1176.0], [40.0, 1227.0], [40.1, 1297.0], [40.2, 1326.0], [40.3, 1334.0], [40.4, 1341.0], [40.5, 1347.0], [40.6, 1351.0], [40.7, 1355.0], [40.8, 1356.0], [40.9, 1359.0], [41.0, 1360.0], [41.1, 1362.0], [41.2, 1363.0], [41.3, 1364.0], [41.4, 1366.0], [41.5, 1367.0], [41.6, 1368.0], [41.7, 1369.0], [41.8, 1370.0], [41.9, 1371.0], [42.0, 1372.0], [42.1, 1373.0], [42.2, 1374.0], [42.3, 1374.0], [42.4, 1376.0], [42.5, 1376.0], [42.6, 1377.0], [42.7, 1378.0], [42.8, 1379.0], [42.9, 1380.0], [43.0, 1380.0], [43.1, 1381.0], [43.2, 1381.0], [43.3, 1382.0], [43.4, 1383.0], [43.5, 1384.0], [43.6, 1384.0], [43.7, 1385.0], [43.8, 1386.0], [43.9, 1386.0], [44.0, 1387.0], [44.1, 1387.0], [44.2, 1388.0], [44.3, 1388.0], [44.4, 1389.0], [44.5, 1389.0], [44.6, 1390.0], [44.7, 1391.0], [44.8, 1391.0], [44.9, 1392.0], [45.0, 1392.0], [45.1, 1393.0], [45.2, 1393.0], [45.3, 1394.0], [45.4, 1394.0], [45.5, 1395.0], [45.6, 1395.0], [45.7, 1396.0], [45.8, 1397.0], [45.9, 1397.0], [46.0, 1397.0], [46.1, 1398.0], [46.2, 1398.0], [46.3, 1399.0], [46.4, 1400.0], [46.5, 1400.0], [46.6, 1401.0], [46.7, 1401.0], [46.8, 1402.0], [46.9, 1402.0], [47.0, 1402.0], [47.1, 1403.0], [47.2, 1404.0], [47.3, 1404.0], [47.4, 1405.0], [47.5, 1406.0], [47.6, 1406.0], [47.7, 1406.0], [47.8, 1407.0], [47.9, 1407.0], [48.0, 1408.0], [48.1, 1408.0], [48.2, 1409.0], [48.3, 1409.0], [48.4, 1409.0], [48.5, 1410.0], [48.6, 1410.0], [48.7, 1411.0], [48.8, 1411.0], [48.9, 1412.0], [49.0, 1413.0], [49.1, 1413.0], [49.2, 1414.0], [49.3, 1415.0], [49.4, 1415.0], [49.5, 1416.0], [49.6, 1417.0], [49.7, 1417.0], [49.8, 1418.0], [49.9, 1419.0], [50.0, 1419.0], [50.1, 1420.0], [50.2, 1421.0], [50.3, 1421.0], [50.4, 1422.0], [50.5, 1423.0], [50.6, 1423.0], [50.7, 1424.0], [50.8, 1425.0], [50.9, 1425.0], [51.0, 1427.0], [51.1, 1427.0], [51.2, 1428.0], [51.3, 1429.0], [51.4, 1430.0], [51.5, 1431.0], [51.6, 1432.0], [51.7, 1433.0], [51.8, 1433.0], [51.9, 1434.0], [52.0, 1435.0], [52.1, 1436.0], [52.2, 1437.0], [52.3, 1438.0], [52.4, 1439.0], [52.5, 1440.0], [52.6, 1441.0], [52.7, 1442.0], [52.8, 1443.0], [52.9, 1445.0], [53.0, 1447.0], [53.1, 1448.0], [53.2, 1449.0], [53.3, 1451.0], [53.4, 1452.0], [53.5, 1454.0], [53.6, 1456.0], [53.7, 1458.0], [53.8, 1461.0], [53.9, 1463.0], [54.0, 1467.0], [54.1, 1469.0], [54.2, 1473.0], [54.3, 1478.0], [54.4, 1487.0], [54.5, 1492.0], [54.6, 1498.0], [54.7, 1517.0], [54.8, 1532.0], [54.9, 1549.0], [55.0, 1568.0], [55.1, 1605.0], [55.2, 1662.0], [55.3, 1677.0], [55.4, 1684.0], [55.5, 1690.0], [55.6, 1697.0], [55.7, 1699.0], [55.8, 1704.0], [55.9, 1705.0], [56.0, 1707.0], [56.1, 1709.0], [56.2, 1711.0], [56.3, 1713.0], [56.4, 1715.0], [56.5, 1716.0], [56.6, 1719.0], [56.7, 1720.0], [56.8, 1722.0], [56.9, 1723.0], [57.0, 1724.0], [57.1, 1725.0], [57.2, 1726.0], [57.3, 1727.0], [57.4, 1729.0], [57.5, 1730.0], [57.6, 1731.0], [57.7, 1733.0], [57.8, 1735.0], [57.9, 1736.0], [58.0, 1737.0], [58.1, 1738.0], [58.2, 1738.0], [58.3, 1739.0], [58.4, 1740.0], [58.5, 1742.0], [58.6, 1742.0], [58.7, 1743.0], [58.8, 1744.0], [58.9, 1745.0], [59.0, 1746.0], [59.1, 1747.0], [59.2, 1748.0], [59.3, 1749.0], [59.4, 1750.0], [59.5, 1751.0], [59.6, 1752.0], [59.7, 1753.0], [59.8, 1754.0], [59.9, 1755.0], [60.0, 1756.0], [60.1, 1756.0], [60.2, 1757.0], [60.3, 1758.0], [60.4, 1758.0], [60.5, 1759.0], [60.6, 1760.0], [60.7, 1761.0], [60.8, 1761.0], [60.9, 1762.0], [61.0, 1763.0], [61.1, 1764.0], [61.2, 1765.0], [61.3, 1766.0], [61.4, 1767.0], [61.5, 1768.0], [61.6, 1769.0], [61.7, 1770.0], [61.8, 1770.0], [61.9, 1771.0], [62.0, 1772.0], [62.1, 1773.0], [62.2, 1774.0], [62.3, 1775.0], [62.4, 1776.0], [62.5, 1776.0], [62.6, 1778.0], [62.7, 1779.0], [62.8, 1779.0], [62.9, 1780.0], [63.0, 1782.0], [63.1, 1782.0], [63.2, 1783.0], [63.3, 1785.0], [63.4, 1787.0], [63.5, 1789.0], [63.6, 1790.0], [63.7, 1791.0], [63.8, 1792.0], [63.9, 1794.0], [64.0, 1797.0], [64.1, 1798.0], [64.2, 1800.0], [64.3, 1802.0], [64.4, 1805.0], [64.5, 1807.0], [64.6, 1810.0], [64.7, 1813.0], [64.8, 1816.0], [64.9, 1820.0], [65.0, 1827.0], [65.1, 1840.0], [65.2, 1856.0], [65.3, 1916.0], [65.4, 2015.0], [65.5, 2026.0], [65.6, 2036.0], [65.7, 2040.0], [65.8, 2042.0], [65.9, 2046.0], [66.0, 2048.0], [66.1, 2051.0], [66.2, 2053.0], [66.3, 2055.0], [66.4, 2056.0], [66.5, 2058.0], [66.6, 2060.0], [66.7, 2061.0], [66.8, 2062.0], [66.9, 2064.0], [67.0, 2064.0], [67.1, 2066.0], [67.2, 2066.0], [67.3, 2067.0], [67.4, 2068.0], [67.5, 2069.0], [67.6, 2070.0], [67.7, 2071.0], [67.8, 2072.0], [67.9, 2072.0], [68.0, 2073.0], [68.1, 2074.0], [68.2, 2074.0], [68.3, 2075.0], [68.4, 2076.0], [68.5, 2077.0], [68.6, 2077.0], [68.7, 2078.0], [68.8, 2079.0], [68.9, 2080.0], [69.0, 2080.0], [69.1, 2081.0], [69.2, 2081.0], [69.3, 2082.0], [69.4, 2083.0], [69.5, 2083.0], [69.6, 2084.0], [69.7, 2084.0], [69.8, 2085.0], [69.9, 2086.0], [70.0, 2086.0], [70.1, 2087.0], [70.2, 2087.0], [70.3, 2088.0], [70.4, 2088.0], [70.5, 2089.0], [70.6, 2089.0], [70.7, 2090.0], [70.8, 2091.0], [70.9, 2091.0], [71.0, 2092.0], [71.1, 2092.0], [71.2, 2093.0], [71.3, 2093.0], [71.4, 2094.0], [71.5, 2095.0], [71.6, 2095.0], [71.7, 2095.0], [71.8, 2096.0], [71.9, 2096.0], [72.0, 2097.0], [72.1, 2097.0], [72.2, 2098.0], [72.3, 2098.0], [72.4, 2099.0], [72.5, 2099.0], [72.6, 2100.0], [72.7, 2100.0], [72.8, 2100.0], [72.9, 2101.0], [73.0, 2101.0], [73.1, 2102.0], [73.2, 2102.0], [73.3, 2102.0], [73.4, 2103.0], [73.5, 2103.0], [73.6, 2104.0], [73.7, 2105.0], [73.8, 2105.0], [73.9, 2106.0], [74.0, 2106.0], [74.1, 2107.0], [74.2, 2107.0], [74.3, 2108.0], [74.4, 2108.0], [74.5, 2109.0], [74.6, 2109.0], [74.7, 2110.0], [74.8, 2110.0], [74.9, 2111.0], [75.0, 2112.0], [75.1, 2112.0], [75.2, 2112.0], [75.3, 2113.0], [75.4, 2114.0], [75.5, 2114.0], [75.6, 2115.0], [75.7, 2115.0], [75.8, 2116.0], [75.9, 2116.0], [76.0, 2117.0], [76.1, 2117.0], [76.2, 2118.0], [76.3, 2118.0], [76.4, 2119.0], [76.5, 2119.0], [76.6, 2120.0], [76.7, 2120.0], [76.8, 2121.0], [76.9, 2121.0], [77.0, 2122.0], [77.1, 2122.0], [77.2, 2123.0], [77.3, 2123.0], [77.4, 2124.0], [77.5, 2125.0], [77.6, 2125.0], [77.7, 2126.0], [77.8, 2126.0], [77.9, 2127.0], [78.0, 2128.0], [78.1, 2128.0], [78.2, 2129.0], [78.3, 2129.0], [78.4, 2130.0], [78.5, 2131.0], [78.6, 2131.0], [78.7, 2132.0], [78.8, 2133.0], [78.9, 2133.0], [79.0, 2134.0], [79.1, 2135.0], [79.2, 2135.0], [79.3, 2136.0], [79.4, 2137.0], [79.5, 2138.0], [79.6, 2138.0], [79.7, 2139.0], [79.8, 2140.0], [79.9, 2140.0], [80.0, 2141.0], [80.1, 2142.0], [80.2, 2142.0], [80.3, 2143.0], [80.4, 2144.0], [80.5, 2145.0], [80.6, 2146.0], [80.7, 2146.0], [80.8, 2147.0], [80.9, 2149.0], [81.0, 2149.0], [81.1, 2150.0], [81.2, 2151.0], [81.3, 2152.0], [81.4, 2153.0], [81.5, 2154.0], [81.6, 2155.0], [81.7, 2156.0], [81.8, 2157.0], [81.9, 2159.0], [82.0, 2160.0], [82.1, 2161.0], [82.2, 2162.0], [82.3, 2163.0], [82.4, 2164.0], [82.5, 2165.0], [82.6, 2166.0], [82.7, 2169.0], [82.8, 2171.0], [82.9, 2173.0], [83.0, 2175.0], [83.1, 2177.0], [83.2, 2180.0], [83.3, 2182.0], [83.4, 2185.0], [83.5, 2188.0], [83.6, 2192.0], [83.7, 2195.0], [83.8, 2201.0], [83.9, 2206.0], [84.0, 2216.0], [84.1, 2230.0], [84.2, 2248.0], [84.3, 2270.0], [84.4, 2415.0], [84.5, 2501.0], [84.6, 2707.0], [84.7, 2731.0], [84.8, 2746.0], [84.9, 2755.0], [85.0, 2759.0], [85.1, 2764.0], [85.2, 2768.0], [85.3, 2772.0], [85.4, 2777.0], [85.5, 2779.0], [85.6, 2782.0], [85.7, 2784.0], [85.8, 2787.0], [85.9, 2790.0], [86.0, 2793.0], [86.1, 2797.0], [86.2, 2799.0], [86.3, 2801.0], [86.4, 2804.0], [86.5, 2806.0], [86.6, 2808.0], [86.7, 2811.0], [86.8, 2814.0], [86.9, 2817.0], [87.0, 2821.0], [87.1, 2824.0], [87.2, 2828.0], [87.3, 2833.0], [87.4, 2837.0], [87.5, 2842.0], [87.6, 2847.0], [87.7, 2853.0], [87.8, 2859.0], [87.9, 2866.0], [88.0, 2879.0], [88.1, 2892.0], [88.2, 2912.0], [88.3, 2930.0], [88.4, 3003.0], [88.5, 3047.0], [88.6, 3060.0], [88.7, 3067.0], [88.8, 3073.0], [88.9, 3081.0], [89.0, 3088.0], [89.1, 3092.0], [89.2, 3096.0], [89.3, 3100.0], [89.4, 3105.0], [89.5, 3107.0], [89.6, 3111.0], [89.7, 3113.0], [89.8, 3116.0], [89.9, 3119.0], [90.0, 3122.0], [90.1, 3125.0], [90.2, 3128.0], [90.3, 3133.0], [90.4, 3136.0], [90.5, 3139.0], [90.6, 3142.0], [90.7, 3146.0], [90.8, 3151.0], [90.9, 3155.0], [91.0, 3160.0], [91.1, 3166.0], [91.2, 3175.0], [91.3, 3181.0], [91.4, 3188.0], [91.5, 3202.0], [91.6, 3218.0], [91.7, 3236.0], [91.8, 3287.0], [91.9, 3385.0], [92.0, 3419.0], [92.1, 3432.0], [92.2, 3446.0], [92.3, 3459.0], [92.4, 3474.0], [92.5, 3504.0], [92.6, 3556.0], [92.7, 3625.0], [92.8, 3652.0], [92.9, 3712.0], [93.0, 3836.0], [93.1, 3953.0], [93.2, 4014.0], [93.3, 4103.0], [93.4, 4144.0], [93.5, 4186.0], [93.6, 4198.0], [93.7, 4211.0], [93.8, 4225.0], [93.9, 4241.0], [94.0, 4256.0], [94.1, 4271.0], [94.2, 4281.0], [94.3, 4294.0], [94.4, 4305.0], [94.5, 4330.0], [94.6, 4341.0], [94.7, 4379.0], [94.8, 4396.0], [94.9, 4415.0], [95.0, 4435.0], [95.1, 4452.0], [95.2, 4461.0], [95.3, 4474.0], [95.4, 4482.0], [95.5, 4494.0], [95.6, 4508.0], [95.7, 4516.0], [95.8, 4521.0], [95.9, 4525.0], [96.0, 4532.0], [96.1, 4538.0], [96.2, 4543.0], [96.3, 4551.0], [96.4, 4557.0], [96.5, 4560.0], [96.6, 4564.0], [96.7, 4573.0], [96.8, 4577.0], [96.9, 4589.0], [97.0, 4599.0], [97.1, 4606.0], [97.2, 4627.0], [97.3, 4646.0], [97.4, 4656.0], [97.5, 4680.0], [97.6, 4714.0], [97.7, 4773.0], [97.8, 4825.0], [97.9, 4868.0], [98.0, 4911.0], [98.1, 4937.0], [98.2, 4970.0], [98.3, 5008.0], [98.4, 5057.0], [98.5, 5136.0], [98.6, 5166.0], [98.7, 5192.0], [98.8, 5214.0], [98.9, 5224.0], [99.0, 5243.0], [99.1, 5264.0], [99.2, 5283.0], [99.3, 5309.0], [99.4, 5364.0], [99.5, 5404.0], [99.6, 5481.0], [99.7, 5589.0], [99.8, 5698.0], [99.9, 5938.0]], "isOverall": false, "label": "Get Search", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 2055.0, "series": [{"data": [[600.0, 1391.0], [700.0, 935.0], [800.0, 125.0], [900.0, 283.0], [1000.0, 2055.0], [1100.0, 256.0], [1200.0, 25.0], [1300.0, 1066.0], [1400.0, 1405.0], [1500.0, 84.0], [1600.0, 104.0], [1700.0, 1444.0], [1800.0, 191.0], [1900.0, 13.0], [2000.0, 1231.0], [2100.0, 1909.0], [2200.0, 96.0], [2300.0, 7.0], [2400.0, 19.0], [2500.0, 8.0], [2600.0, 8.0], [2800.0, 328.0], [2700.0, 277.0], [2900.0, 44.0], [3000.0, 152.0], [3100.0, 374.0], [3200.0, 57.0], [3300.0, 22.0], [3400.0, 92.0], [3500.0, 29.0], [3600.0, 41.0], [3700.0, 15.0], [3800.0, 11.0], [3900.0, 21.0], [4000.0, 22.0], [4100.0, 54.0], [4200.0, 124.0], [4300.0, 82.0], [4400.0, 124.0], [4500.0, 250.0], [4600.0, 96.0], [4700.0, 26.0], [4800.0, 41.0], [4900.0, 53.0], [5100.0, 46.0], [5000.0, 29.0], [5200.0, 91.0], [5300.0, 39.0], [5400.0, 23.0], [5500.0, 17.0], [5600.0, 15.0], [5700.0, 8.0], [5800.0, 4.0], [6100.0, 2.0], [5900.0, 5.0], [6000.0, 2.0], [6300.0, 3.0], [6200.0, 2.0], [6600.0, 2.0], [6400.0, 3.0], [6800.0, 1.0], [7000.0, 1.0], [500.0, 1770.0]], "isOverall": false, "label": "Get Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7741.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 9312.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 9312.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 7741.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 4.615384615384615, "minX": 1.69118022E12, "maxY": 30.0, "series": [{"data": [[1.69118074E12, 25.0], [1.69118236E12, 15.0], [1.6911804E12, 17.880701754385964], [1.6911827E12, 26.11344537815124], [1.69118296E12, 5.0], [1.69118066E12, 30.0], [1.69118228E12, 10.0], [1.69118032E12, 10.0], [1.69118262E12, 30.0], [1.69118288E12, 10.74237288135593], [1.691181E12, 4.906542056074766], [1.69118058E12, 30.0], [1.6911822E12, 5.0], [1.69118024E12, 5.0], [1.69118254E12, 30.0], [1.6911828E12, 20.0], [1.69118092E12, 10.0], [1.6911805E12, 25.0], [1.69118246E12, 24.69565217391304], [1.69118272E12, 25.0], [1.69118084E12, 15.0], [1.69118268E12, 30.0], [1.69118072E12, 25.0], [1.69118046E12, 22.631578947368432], [1.69118234E12, 15.0], [1.69118098E12, 5.0], [1.6911826E12, 30.0], [1.69118064E12, 30.0], [1.69118294E12, 6.067010309278353], [1.69118038E12, 15.0], [1.69118226E12, 5.517241379310344], [1.6911809E12, 10.0], [1.69118252E12, 29.5968992248062], [1.69118056E12, 30.0], [1.69118286E12, 15.0], [1.6911803E12, 10.0], [1.69118082E12, 17.9644128113879], [1.69118244E12, 20.0], [1.69118048E12, 25.0], [1.69118278E12, 20.0], [1.69118022E12, 4.982608695652173], [1.691183E12, 4.615384615384615], [1.69118078E12, 20.0], [1.69118232E12, 10.288888888888888], [1.69118044E12, 20.0], [1.69118266E12, 30.0], [1.69118292E12, 10.0], [1.69118096E12, 5.0], [1.6911807E12, 27.921985815602827], [1.69118224E12, 5.0], [1.69118036E12, 15.0], [1.69118258E12, 30.0], [1.69118284E12, 15.0], [1.69118088E12, 12.84192439862543], [1.69118062E12, 30.0], [1.69118028E12, 8.826771653543304], [1.6911825E12, 25.0], [1.69118276E12, 20.774999999999995], [1.6911808E12, 20.0], [1.69118054E12, 30.0], [1.69118242E12, 20.0], [1.69118042E12, 20.0], [1.69118238E12, 15.047619047619047], [1.69118264E12, 30.0], [1.69118076E12, 22.968309859154935], [1.69118298E12, 5.0], [1.69118034E12, 13.094736842105268], [1.6911823E12, 10.0], [1.69118256E12, 30.0], [1.69118068E12, 30.0], [1.6911829E12, 10.0], [1.69118026E12, 5.0], [1.69118222E12, 5.0], [1.69118094E12, 8.407258064516135], [1.69118248E12, 25.0], [1.6911806E12, 30.0], [1.69118282E12, 15.790209790209781], [1.69118086E12, 15.0], [1.6911824E12, 19.97701149425287], [1.69118052E12, 27.373239436619713], [1.69118274E12, 25.0]], "isOverall": false, "label": "TC4: Stress Testing", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 20000, "maxX": 1.691183E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 543.0, "minX": 1.0, "maxY": 5937.8, "series": [{"data": [[2.0, 573.5], [3.0, 621.0], [4.0, 598.75], [5.0, 558.0990654205604], [6.0, 621.5], [7.0, 734.0], [8.0, 750.5714285714286], [9.0, 726.7142857142857], [10.0, 685.5475095785437], [11.0, 782.0], [12.0, 961.5384615384614], [13.0, 903.75], [14.0, 1015.5], [15.0, 1050.6356132075475], [16.0, 1318.8333333333335], [17.0, 1315.1818181818182], [18.0, 1345.2142857142853], [19.0, 1307.0], [20.0, 1411.37987271281], [21.0, 1692.5714285714284], [22.0, 1767.2], [23.0, 1699.6666666666667], [24.0, 1901.3333333333335], [25.0, 1757.2734790313082], [26.0, 2030.5384615384617], [27.0, 1971.5555555555557], [28.0, 1987.9], [29.0, 1912.8333333333335], [30.0, 2114.8089783281666], [31.0, 2501.0], [33.0, 2458.0], [32.0, 2486.0], [35.0, 2669.5625], [34.0, 2501.0], [37.0, 1790.5], [36.0, 2771.8125], [39.0, 2113.0], [38.0, 2809.8], [41.0, 3081.7142857142853], [40.0, 2817.0146579804536], [43.0, 2932.1875], [42.0, 3098.0], [45.0, 3149.9263351749532], [44.0, 3137.5], [47.0, 3648.0], [46.0, 3650.6666666666665], [48.0, 3654.0], [51.0, 3940.181818181818], [50.0, 3543.859259259259], [52.0, 717.0], [53.0, 4366.0], [55.0, 4415.333333333333], [59.0, 4640.75], [58.0, 4618.333333333333], [61.0, 3836.2], [60.0, 4105.797687861273], [62.0, 4393.142857142857], [63.0, 4576.583333333333], [67.0, 4657.333333333334], [66.0, 4972.333333333334], [65.0, 4522.019083969465], [64.0, 4905.0], [70.0, 4281.029411764706], [71.0, 4997.886792452831], [69.0, 4485.578947368421], [68.0, 4283.235294117647], [72.0, 4802.416666666666], [73.0, 4740.476190476191], [74.0, 4569.904761904762], [75.0, 4844.747572815534], [76.0, 4555.489583333333], [77.0, 4927.928571428572], [78.0, 4960.7], [79.0, 4623.0], [83.0, 3144.0], [82.0, 3747.0], [80.0, 3458.592592592592], [85.0, 4987.584615384614], [86.0, 4971.111111111111], [87.0, 5219.0], [84.0, 4340.0], [91.0, 5004.0], [90.0, 5718.25], [89.0, 5518.571428571428], [88.0, 5438.6], [93.0, 5653.666666666667], [95.0, 5843.2], [94.0, 5937.8], [92.0, 5374.125], [99.0, 4115.0], [98.0, 5421.0], [96.0, 5404.0], [102.0, 4154.5], [100.0, 4142.0], [103.0, 5409.833333333334], [101.0, 5349.0], [105.0, 2077.0], [107.0, 2809.6], [104.0, 4679.0], [106.0, 5219.0], [110.0, 2181.0], [108.0, 3771.3333333333335], [109.0, 3122.5], [112.0, 2334.0], [1.0, 543.0]], "isOverall": false, "label": "Get Search", "isController": false}, {"data": [[24.397290799273062, 1701.7016360757561]], "isOverall": false, "label": "Get Search-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 112.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 233.5, "minX": 1.69118022E12, "maxY": 116135.6, "series": [{"data": [[1.69118074E12, 111035.05], [1.69118236E12, 19225.15], [1.6911804E12, 111819.75], [1.6911827E12, 93471.55], [1.69118296E12, 69445.95], [1.69118066E12, 111427.4], [1.69118228E12, 18832.8], [1.69118032E12, 112212.1], [1.69118262E12, 74938.85], [1.69118288E12, 115743.25], [1.691181E12, 41981.45], [1.69118058E12, 109858.0], [1.6911822E12, 3923.5], [1.69118024E12, 71800.05], [1.69118254E12, 52574.9], [1.6911828E12, 110642.7], [1.69118092E12, 116135.6], [1.6911805E12, 111427.4], [1.69118246E12, 36096.2], [1.69118272E12, 94556.35], [1.69118084E12, 112604.45], [1.69118268E12, 83133.8], [1.69118072E12, 111127.35], [1.69118046E12, 111819.75], [1.69118234E12, 23148.65], [1.69118098E12, 71800.05], [1.6911826E12, 75331.2], [1.69118064E12, 110642.7], [1.69118294E12, 76115.9], [1.69118038E12, 112212.1], [1.69118226E12, 11378.15], [1.6911809E12, 115743.25], [1.69118252E12, 50613.15], [1.69118056E12, 111016.85], [1.69118286E12, 112980.15], [1.6911803E12, 111427.4], [1.69118082E12, 110250.35], [1.69118244E12, 33742.1], [1.69118048E12, 112604.45], [1.69118278E12, 111819.75], [1.69118022E12, 45212.6], [1.691183E12, 10201.1], [1.69118078E12, 110642.7], [1.69118232E12, 17655.75], [1.69118044E12, 111427.4], [1.69118266E12, 83570.55], [1.69118292E12, 116135.6], [1.69118096E12, 71407.7], [1.6911807E12, 110642.7], [1.69118224E12, 12162.85], [1.69118036E12, 112996.8], [1.69118258E12, 72977.1], [1.69118284E12, 113389.15], [1.69118088E12, 114157.2], [1.69118062E12, 110642.7], [1.69118028E12, 99656.9], [1.6911825E12, 46297.3], [1.69118276E12, 109858.0], [1.6911808E12, 110642.7], [1.69118054E12, 111777.2], [1.69118242E12, 33349.75], [1.69118042E12, 111427.4], [1.69118238E12, 24718.05], [1.69118264E12, 83178.2], [1.69118076E12, 111427.4], [1.69118298E12, 69838.3], [1.69118034E12, 111819.75], [1.6911823E12, 17655.75], [1.69118256E12, 61991.3], [1.69118068E12, 111427.4], [1.6911829E12, 113781.5], [1.69118026E12, 71800.05], [1.69118222E12, 11770.5], [1.69118094E12, 97302.8], [1.69118248E12, 38450.3], [1.6911806E12, 111819.75], [1.69118282E12, 112212.1], [1.69118086E12, 111035.05], [1.6911824E12, 34134.45], [1.69118052E12, 111427.4], [1.69118274E12, 92202.25]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69118074E12, 6608.05], [1.69118236E12, 1144.15], [1.6911804E12, 6654.75], [1.6911827E12, 5557.3], [1.69118296E12, 4132.95], [1.69118066E12, 6631.4], [1.69118228E12, 1120.8], [1.69118032E12, 6678.1], [1.69118262E12, 4459.85], [1.69118288E12, 6888.25], [1.691181E12, 2498.45], [1.69118058E12, 6538.0], [1.6911822E12, 233.5], [1.69118024E12, 4273.05], [1.69118254E12, 3128.9], [1.6911828E12, 6584.7], [1.69118092E12, 6911.6], [1.6911805E12, 6631.4], [1.69118246E12, 2148.2], [1.69118272E12, 5627.35], [1.69118084E12, 6701.45], [1.69118268E12, 4950.2], [1.69118072E12, 6608.05], [1.69118046E12, 6654.75], [1.69118234E12, 1377.65], [1.69118098E12, 4273.05], [1.6911826E12, 4483.2], [1.69118064E12, 6584.7], [1.69118294E12, 4529.9], [1.69118038E12, 6678.1], [1.69118226E12, 677.15], [1.6911809E12, 6888.25], [1.69118252E12, 3012.15], [1.69118056E12, 6608.05], [1.69118286E12, 6724.8], [1.6911803E12, 6631.4], [1.69118082E12, 6561.35], [1.69118244E12, 2008.1], [1.69118048E12, 6701.45], [1.69118278E12, 6654.75], [1.69118022E12, 2685.25], [1.691183E12, 607.1], [1.69118078E12, 6584.7], [1.69118232E12, 1050.75], [1.69118044E12, 6631.4], [1.69118266E12, 4973.55], [1.69118292E12, 6911.6], [1.69118096E12, 4249.7], [1.6911807E12, 6584.7], [1.69118224E12, 723.85], [1.69118036E12, 6724.8], [1.69118258E12, 4343.1], [1.69118284E12, 6748.15], [1.69118088E12, 6794.85], [1.69118062E12, 6584.7], [1.69118028E12, 5930.9], [1.6911825E12, 2755.3], [1.69118276E12, 6538.0], [1.6911808E12, 6584.7], [1.69118054E12, 6654.75], [1.69118242E12, 1984.75], [1.69118042E12, 6631.4], [1.69118238E12, 1471.05], [1.69118264E12, 4950.2], [1.69118076E12, 6631.4], [1.69118298E12, 4156.3], [1.69118034E12, 6654.75], [1.6911823E12, 1050.75], [1.69118256E12, 3689.3], [1.69118068E12, 6631.4], [1.6911829E12, 6771.5], [1.69118026E12, 4273.05], [1.69118222E12, 700.5], [1.69118094E12, 5790.8], [1.69118248E12, 2288.3], [1.6911806E12, 6654.75], [1.69118282E12, 6678.1], [1.69118086E12, 6608.05], [1.6911824E12, 2031.45], [1.69118052E12, 6631.4], [1.69118274E12, 5487.25]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 20000, "maxX": 1.691183E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 543.5628415300546, "minX": 1.69118022E12, "maxY": 5752.142857142858, "series": [{"data": [[1.69118074E12, 1757.109540636043], [1.69118236E12, 5752.142857142858], [1.6911804E12, 1234.6140350877192], [1.6911827E12, 2266.5210084033633], [1.69118296E12, 569.7909604519771], [1.69118066E12, 2115.1690140845076], [1.69118228E12, 4032.395833333334], [1.69118032E12, 715.4475524475522], [1.69118262E12, 3146.9999999999995], [1.69118288E12, 742.8271186440675], [1.691181E12, 544.6728971962617], [1.69118058E12, 2142.2285714285745], [1.6911822E12, 898.3000000000002], [1.69118024E12, 547.4918032786885], [1.69118254E12, 4558.671641791043], [1.6911828E12, 1423.0070921985819], [1.69118092E12, 683.2905405405398], [1.6911805E12, 1754.43661971831], [1.69118246E12, 5146.630434782609], [1.69118272E12, 2080.4979253112047], [1.69118084E12, 1047.6236933797911], [1.69118268E12, 2829.669811320754], [1.69118072E12, 1761.9823321554775], [1.69118046E12, 1558.2666666666669], [1.69118234E12, 4993.13559322034], [1.69118098E12, 544.8142076502733], [1.6911826E12, 3117.2083333333326], [1.69118064E12, 2131.8262411347528], [1.69118294E12, 595.0], [1.69118038E12, 1047.276223776223], [1.69118226E12, 3380.724137931035], [1.6911809E12, 671.2372881355933], [1.69118252E12, 4433.682170542635], [1.69118056E12, 2115.6890459363963], [1.69118286E12, 1038.142361111112], [1.6911803E12, 685.4577464788732], [1.69118082E12, 1302.270462633452], [1.69118244E12, 4676.36046511628], [1.69118048E12, 1747.6829268292686], [1.69118278E12, 1399.417543859649], [1.69118022E12, 618.0434782608694], [1.691183E12, 595.3076923076923], [1.69118078E12, 1419.0425531914893], [1.69118232E12, 4460.800000000001], [1.69118044E12, 1406.1690140845064], [1.69118266E12, 2811.6103286384982], [1.69118292E12, 675.6081081081081], [1.69118096E12, 547.2967032967033], [1.6911807E12, 2019.3510638297878], [1.69118224E12, 3296.354838709678], [1.69118036E12, 1040.8437500000005], [1.69118258E12, 3262.7365591397856], [1.69118284E12, 1043.5467128027672], [1.69118088E12, 903.5463917525773], [1.69118062E12, 2122.8191489361693], [1.69118028E12, 654.0236220472443], [1.6911825E12, 4302.144067796611], [1.69118276E12, 1535.8642857142845], [1.6911808E12, 1417.6418439716317], [1.69118054E12, 2104.638596491227], [1.69118242E12, 4752.49411764706], [1.69118042E12, 1406.74647887324], [1.69118238E12, 5053.0158730158755], [1.69118264E12, 2852.0943396226407], [1.69118076E12, 1649.105633802816], [1.69118298E12, 558.926966292135], [1.69118034E12, 903.7684210526319], [1.6911823E12, 4460.288888888888], [1.69118256E12, 3833.962025316457], [1.69118068E12, 2111.137323943663], [1.6911829E12, 689.8793103448273], [1.69118026E12, 543.5628415300546], [1.69118222E12, 3271.0999999999995], [1.69118094E12, 642.8266129032259], [1.69118248E12, 5170.122448979591], [1.6911806E12, 2102.3543859649126], [1.69118282E12, 1124.2167832167834], [1.69118086E12, 1053.3816254416959], [1.6911824E12, 4430.448275862067], [1.69118052E12, 1899.6056338028154], [1.69118274E12, 2115.9361702127667]], "isOverall": false, "label": "Get Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 20000, "maxX": 1.691183E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 543.4207650273228, "minX": 1.69118022E12, "maxY": 5751.9795918367345, "series": [{"data": [[1.69118074E12, 1756.9823321554757], [1.69118236E12, 5751.9795918367345], [1.6911804E12, 1234.4456140350874], [1.6911827E12, 2266.348739495798], [1.69118296E12, 569.6497175141243], [1.69118066E12, 2115.0000000000005], [1.69118228E12, 4032.3333333333335], [1.69118032E12, 715.3006993006998], [1.69118262E12, 3146.853403141361], [1.69118288E12, 742.7254237288134], [1.691181E12, 544.5700934579437], [1.69118058E12, 2142.071428571429], [1.6911822E12, 898.0], [1.69118024E12, 547.3497267759564], [1.69118254E12, 4558.514925373134], [1.6911828E12, 1422.8723404255322], [1.69118092E12, 683.1047297297299], [1.6911805E12, 1754.3098591549292], [1.69118246E12, 5146.500000000002], [1.69118272E12, 2080.3568464730306], [1.69118084E12, 1047.4564459930323], [1.69118268E12, 2829.4999999999977], [1.69118072E12, 1761.855123674911], [1.69118046E12, 1558.0877192982457], [1.69118234E12, 4993.033898305085], [1.69118098E12, 544.6775956284152], [1.6911826E12, 3117.0364583333344], [1.69118064E12, 2131.684397163121], [1.69118294E12, 594.8917525773194], [1.69118038E12, 1047.125874125874], [1.69118226E12, 3380.5172413793102], [1.6911809E12, 671.0745762711861], [1.69118252E12, 4433.503875968994], [1.69118056E12, 2115.5618374558303], [1.69118286E12, 1038.0104166666672], [1.6911803E12, 685.2957746478869], [1.69118082E12, 1302.1245551601414], [1.69118244E12, 4676.162790697675], [1.69118048E12, 1747.5470383275256], [1.69118278E12, 1399.2421052631582], [1.69118022E12, 617.8695652173914], [1.691183E12, 595.1923076923076], [1.69118078E12, 1418.858156028368], [1.69118232E12, 4460.622222222222], [1.69118044E12, 1405.985915492958], [1.69118266E12, 2811.4553990610343], [1.69118292E12, 675.45945945946], [1.69118096E12, 547.1703296703299], [1.6911807E12, 2019.195035460994], [1.69118224E12, 3296.1935483870966], [1.69118036E12, 1040.6701388888898], [1.69118258E12, 3262.5913978494627], [1.69118284E12, 1043.411764705883], [1.69118088E12, 903.4158075601381], [1.69118062E12, 2122.7056737588628], [1.69118028E12, 653.8937007874011], [1.6911825E12, 4302.033898305087], [1.69118276E12, 1535.6642857142847], [1.6911808E12, 1417.492907801418], [1.69118054E12, 2104.4947368421062], [1.69118242E12, 4752.30588235294], [1.69118042E12, 1406.5845070422524], [1.69118238E12, 5052.888888888889], [1.69118264E12, 2851.9150943396226], [1.69118076E12, 1648.9330985915503], [1.69118298E12, 558.808988764045], [1.69118034E12, 903.6350877192979], [1.6911823E12, 4460.177777777778], [1.69118256E12, 3833.7974683544307], [1.69118068E12, 2110.9859154929577], [1.6911829E12, 689.7275862068965], [1.69118026E12, 543.4207650273228], [1.69118222E12, 3270.7666666666664], [1.69118094E12, 642.7137096774193], [1.69118248E12, 5170.020408163266], [1.6911806E12, 2102.2140350877185], [1.69118282E12, 1124.0524475524473], [1.69118086E12, 1053.2226148409893], [1.6911824E12, 4430.298850574713], [1.69118052E12, 1899.4647887323943], [1.69118274E12, 2115.7574468085127]], "isOverall": false, "label": "Get Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 20000, "maxX": 1.691183E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 228.8743169398906, "minX": 1.69118022E12, "maxY": 253.2, "series": [{"data": [[1.69118074E12, 230.9187279151942], [1.69118236E12, 231.93877551020404], [1.6911804E12, 230.74385964912278], [1.6911827E12, 231.47058823529406], [1.69118296E12, 231.0734463276836], [1.69118066E12, 231.00352112676055], [1.69118228E12, 232.83333333333331], [1.69118032E12, 232.19230769230757], [1.69118262E12, 231.01570680628257], [1.69118288E12, 230.73898305084745], [1.691181E12, 229.01869158878506], [1.69118058E12, 231.39642857142843], [1.6911822E12, 253.2], [1.69118024E12, 230.3715846994536], [1.69118254E12, 230.52985074626872], [1.6911828E12, 232.4503546099291], [1.69118092E12, 231.63175675675683], [1.6911805E12, 230.9436619718309], [1.69118246E12, 231.49999999999997], [1.69118272E12, 229.61410788381755], [1.69118084E12, 231.3972125435541], [1.69118268E12, 232.15094339622652], [1.69118072E12, 232.00353356890466], [1.69118046E12, 230.48421052631568], [1.69118234E12, 235.55932203389827], [1.69118098E12, 228.8743169398906], [1.6911826E12, 231.73437499999991], [1.69118064E12, 232.0106382978724], [1.69118294E12, 231.07216494845366], [1.69118038E12, 229.91958041958043], [1.69118226E12, 231.5862068965517], [1.6911809E12, 230.94915254237281], [1.69118252E12, 232.74418604651166], [1.69118056E12, 231.34275618374562], [1.69118286E12, 232.05555555555554], [1.6911803E12, 230.1478873239439], [1.69118082E12, 231.9217081850532], [1.69118244E12, 232.00000000000009], [1.69118048E12, 231.83972125435537], [1.69118278E12, 230.97894736842096], [1.69118022E12, 233.75652173913033], [1.691183E12, 234.7307692307692], [1.69118078E12, 230.55319148936175], [1.69118232E12, 230.8666666666667], [1.69118044E12, 231.02112676056342], [1.69118266E12, 231.44600938967145], [1.69118292E12, 231.67905405405395], [1.69118096E12, 230.51648351648348], [1.6911807E12, 231.78368794326244], [1.69118224E12, 234.3548387096774], [1.69118036E12, 230.4340277777778], [1.69118258E12, 231.93010752688167], [1.69118284E12, 230.13494809688598], [1.69118088E12, 230.29209621993132], [1.69118062E12, 231.58865248226954], [1.69118028E12, 230.9173228346458], [1.6911825E12, 231.23728813559316], [1.69118276E12, 231.26428571428568], [1.6911808E12, 231.38297872340434], [1.69118054E12, 231.16491228070169], [1.69118242E12, 234.9764705882353], [1.69118042E12, 231.7499999999999], [1.69118238E12, 230.39682539682542], [1.69118264E12, 231.60849056603774], [1.69118076E12, 231.531690140845], [1.69118298E12, 230.3426966292135], [1.69118034E12, 230.79999999999998], [1.6911823E12, 231.97777777777776], [1.69118256E12, 230.90506329113921], [1.69118068E12, 230.50704225352106], [1.6911829E12, 232.23103448275856], [1.69118026E12, 229.59016393442624], [1.69118222E12, 249.39999999999995], [1.69118094E12, 231.1733870967742], [1.69118248E12, 231.33673469387747], [1.6911806E12, 230.34035087719303], [1.69118282E12, 231.1363636363637], [1.69118086E12, 230.62897526501766], [1.6911824E12, 234.67816091954018], [1.69118052E12, 231.8239436619719], [1.69118274E12, 230.4]], "isOverall": false, "label": "Get Search", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 20000, "maxX": 1.691183E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 517.0, "minX": 1.69118022E12, "maxY": 7094.0, "series": [{"data": [[1.69118074E12, 1841.0], [1.69118236E12, 7094.0], [1.6911804E12, 1472.0], [1.6911827E12, 2872.0], [1.69118296E12, 1046.0], [1.69118066E12, 2195.0], [1.69118228E12, 4426.0], [1.69118032E12, 1276.0], [1.69118262E12, 3294.0], [1.69118288E12, 1100.0], [1.691181E12, 685.0], [1.69118058E12, 2302.0], [1.6911822E12, 1636.0], [1.69118024E12, 616.0], [1.69118254E12, 4654.0], [1.6911828E12, 1547.0], [1.69118092E12, 966.0], [1.6911805E12, 1827.0], [1.69118246E12, 5301.0], [1.69118272E12, 2150.0], [1.69118084E12, 1129.0], [1.69118268E12, 2973.0], [1.69118072E12, 1834.0], [1.69118046E12, 1814.0], [1.69118234E12, 5699.0], [1.69118098E12, 625.0], [1.6911826E12, 3228.0], [1.69118064E12, 2258.0], [1.69118294E12, 909.0], [1.69118038E12, 1178.0], [1.69118226E12, 3811.0], [1.6911809E12, 1009.0], [1.69118252E12, 4610.0], [1.69118056E12, 2203.0], [1.69118286E12, 1217.0], [1.6911803E12, 1164.0], [1.69118082E12, 1527.0], [1.69118244E12, 6280.0], [1.69118048E12, 1843.0], [1.69118278E12, 1517.0], [1.69118022E12, 1376.0], [1.691183E12, 711.0], [1.69118078E12, 1624.0], [1.69118232E12, 4676.0], [1.69118044E12, 1547.0], [1.69118266E12, 2914.0], [1.69118292E12, 800.0], [1.69118096E12, 656.0], [1.6911807E12, 2232.0], [1.69118224E12, 3940.0], [1.69118036E12, 1160.0], [1.69118258E12, 3670.0], [1.69118284E12, 1158.0], [1.69118088E12, 1186.0], [1.69118062E12, 2250.0], [1.69118028E12, 906.0], [1.6911825E12, 4690.0], [1.69118276E12, 2143.0], [1.6911808E12, 1595.0], [1.69118054E12, 2193.0], [1.69118242E12, 5026.0], [1.69118042E12, 1516.0], [1.69118238E12, 5895.0], [1.69118264E12, 3182.0], [1.69118076E12, 1916.0], [1.69118298E12, 969.0], [1.69118034E12, 1307.0], [1.6911823E12, 4754.0], [1.69118256E12, 4665.0], [1.69118068E12, 2282.0], [1.6911829E12, 915.0], [1.69118026E12, 597.0], [1.69118222E12, 5792.0], [1.69118094E12, 944.0], [1.69118248E12, 5552.0], [1.6911806E12, 2190.0], [1.69118282E12, 1466.0], [1.69118086E12, 1178.0], [1.6911824E12, 4961.0], [1.69118052E12, 2209.0], [1.69118274E12, 2194.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69118074E12, 1684.0], [1.69118236E12, 5025.0], [1.6911804E12, 958.0], [1.6911827E12, 2005.0], [1.69118296E12, 521.0], [1.69118066E12, 2032.0], [1.69118228E12, 3586.0], [1.69118032E12, 521.0], [1.69118262E12, 2998.0], [1.69118288E12, 532.0], [1.691181E12, 521.0], [1.69118058E12, 2045.0], [1.6911822E12, 653.0], [1.69118024E12, 520.0], [1.69118254E12, 4475.0], [1.6911828E12, 1296.0], [1.69118092E12, 540.0], [1.6911805E12, 1652.0], [1.69118246E12, 4855.0], [1.69118272E12, 2015.0], [1.69118084E12, 966.0], [1.69118268E12, 2707.0], [1.69118072E12, 1668.0], [1.69118046E12, 1332.0], [1.69118234E12, 4135.0], [1.69118098E12, 518.0], [1.6911826E12, 3013.0], [1.69118064E12, 2043.0], [1.69118294E12, 517.0], [1.69118038E12, 934.0], [1.69118226E12, 3085.0], [1.6911809E12, 550.0], [1.69118252E12, 4133.0], [1.69118056E12, 2044.0], [1.69118286E12, 853.0], [1.6911803E12, 537.0], [1.69118082E12, 973.0], [1.69118244E12, 4229.0], [1.69118048E12, 1662.0], [1.69118278E12, 1313.0], [1.69118022E12, 521.0], [1.691183E12, 525.0], [1.69118078E12, 1317.0], [1.69118232E12, 4069.0], [1.69118044E12, 1337.0], [1.69118266E12, 2731.0], [1.69118292E12, 536.0], [1.69118096E12, 522.0], [1.6911807E12, 1680.0], [1.69118224E12, 2927.0], [1.69118036E12, 931.0], [1.69118258E12, 3047.0], [1.69118284E12, 944.0], [1.69118088E12, 600.0], [1.69118062E12, 2044.0], [1.69118028E12, 521.0], [1.6911825E12, 4103.0], [1.69118276E12, 1321.0], [1.6911808E12, 1340.0], [1.69118054E12, 1985.0], [1.69118242E12, 4348.0], [1.69118042E12, 1322.0], [1.69118238E12, 3791.0], [1.69118264E12, 2687.0], [1.69118076E12, 1333.0], [1.69118298E12, 519.0], [1.69118034E12, 529.0], [1.6911823E12, 4155.0], [1.69118256E12, 3370.0], [1.69118068E12, 2015.0], [1.6911829E12, 528.0], [1.69118026E12, 520.0], [1.69118222E12, 1857.0], [1.69118094E12, 526.0], [1.69118248E12, 4335.0], [1.6911806E12, 2015.0], [1.69118282E12, 925.0], [1.69118086E12, 961.0], [1.6911824E12, 3693.0], [1.69118052E12, 1675.0], [1.69118274E12, 2040.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69118074E12, 1798.6], [1.69118236E12, 6494.0], [1.6911804E12, 1422.0], [1.6911827E12, 2772.5], [1.69118296E12, 618.4000000000001], [1.69118066E12, 2155.0], [1.69118228E12, 4192.3], [1.69118032E12, 836.9000000000001], [1.69118262E12, 3232.8], [1.69118288E12, 1039.4], [1.691181E12, 590.2], [1.69118058E12, 2225.7], [1.6911822E12, 1570.1000000000004], [1.69118024E12, 582.6], [1.69118254E12, 4608.5], [1.6911828E12, 1489.4], [1.69118092E12, 771.3], [1.6911805E12, 1791.5], [1.69118246E12, 5267.5], [1.69118272E12, 2115.6], [1.69118084E12, 1092.2], [1.69118268E12, 2902.4], [1.69118072E12, 1802.6], [1.69118046E12, 1756.8000000000002], [1.69118234E12, 5433.0], [1.69118098E12, 572.0], [1.6911826E12, 3165.1], [1.69118064E12, 2183.0], [1.69118294E12, 717.0], [1.69118038E12, 1086.0], [1.69118226E12, 3671.0], [1.6911809E12, 728.0], [1.69118252E12, 4561.0], [1.69118056E12, 2154.0], [1.69118286E12, 1096.1], [1.6911803E12, 771.5], [1.69118082E12, 1447.0], [1.69118244E12, 5532.5999999999985], [1.69118048E12, 1792.4], [1.69118278E12, 1439.0], [1.69118022E12, 711.2], [1.691183E12, 681.3000000000001], [1.69118078E12, 1476.1000000000001], [1.69118232E12, 4609.2], [1.69118044E12, 1447.5], [1.69118266E12, 2863.6], [1.69118292E12, 737.9000000000001], [1.69118096E12, 574.0], [1.6911807E12, 2181.0], [1.69118224E12, 3845.0], [1.69118036E12, 1085.3000000000002], [1.69118258E12, 3626.3], [1.69118284E12, 1086.0], [1.69118088E12, 1094.8], [1.69118062E12, 2172.0], [1.69118028E12, 758.5], [1.6911825E12, 4551.1], [1.69118276E12, 2091.9], [1.6911808E12, 1468.4], [1.69118054E12, 2152.0], [1.69118242E12, 4948.2], [1.69118042E12, 1443.0], [1.69118238E12, 5693.6], [1.69118264E12, 3091.5], [1.69118076E12, 1820.5], [1.69118298E12, 590.3], [1.69118034E12, 1086.0], [1.6911823E12, 4669.6], [1.69118256E12, 4632.6], [1.69118068E12, 2170.0], [1.6911829E12, 778.8000000000001], [1.69118026E12, 563.0], [1.69118222E12, 4070.7000000000003], [1.69118094E12, 752.1], [1.69118248E12, 5420.2], [1.6911806E12, 2136.0], [1.69118282E12, 1430.3], [1.69118086E12, 1102.0], [1.6911824E12, 4787.8], [1.69118052E12, 2145.0], [1.69118274E12, 2162.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69118074E12, 1829.9200000000003], [1.69118236E12, 7094.0], [1.6911804E12, 1458.54], [1.6911827E12, 2848.1], [1.69118296E12, 1037.42], [1.69118066E12, 2191.45], [1.69118228E12, 4426.0], [1.69118032E12, 1188.4899999999998], [1.69118262E12, 3287.56], [1.69118288E12, 1083.04], [1.691181E12, 681.96], [1.69118058E12, 2280.2799999999997], [1.6911822E12, 1636.0], [1.69118024E12, 612.64], [1.69118254E12, 4652.25], [1.6911828E12, 1538.5300000000002], [1.69118092E12, 876.6899999999994], [1.6911805E12, 1825.3], [1.69118246E12, 5301.0], [1.69118272E12, 2139.58], [1.69118084E12, 1123.24], [1.69118268E12, 2948.27], [1.69118072E12, 1830.48], [1.69118046E12, 1812.1399999999999], [1.69118234E12, 5699.0], [1.69118098E12, 600.6399999999999], [1.6911826E12, 3217.77], [1.69118064E12, 2248.0], [1.69118294E12, 895.7000000000002], [1.69118038E12, 1150.13], [1.69118226E12, 3811.0], [1.6911809E12, 884.3600000000001], [1.69118252E12, 4606.099999999999], [1.69118056E12, 2195.1200000000003], [1.69118286E12, 1149.3000000000004], [1.6911803E12, 887.5499999999928], [1.69118082E12, 1506.96], [1.69118244E12, 6280.0], [1.69118048E12, 1827.6], [1.69118278E12, 1484.56], [1.69118022E12, 1372.16], [1.691183E12, 711.0], [1.69118078E12, 1605.0], [1.69118232E12, 4676.0], [1.69118044E12, 1530.3], [1.69118266E12, 2902.44], [1.69118292E12, 788.1799999999998], [1.69118096E12, 624.4599999999996], [1.6911807E12, 2213.51], [1.69118224E12, 3940.0], [1.69118036E12, 1134.5300000000002], [1.69118258E12, 3670.0], [1.69118284E12, 1144.8000000000002], [1.69118088E12, 1171.3999999999999], [1.69118062E12, 2230.19], [1.69118028E12, 892.5999999999999], [1.6911825E12, 4690.0], [1.69118276E12, 2136.14], [1.6911808E12, 1563.8500000000001], [1.69118054E12, 2190.14], [1.69118242E12, 5026.0], [1.69118042E12, 1480.0999999999997], [1.69118238E12, 5895.0], [1.69118264E12, 3173.7], [1.69118076E12, 1884.15], [1.69118298E12, 962.6800000000001], [1.69118034E12, 1167.2599999999993], [1.6911823E12, 4754.0], [1.69118256E12, 4662.64], [1.69118068E12, 2271.15], [1.6911829E12, 893.1699999999996], [1.69118026E12, 590.28], [1.69118222E12, 5792.0], [1.69118094E12, 870.02], [1.69118248E12, 5552.0], [1.6911806E12, 2164.12], [1.69118282E12, 1461.3899999999999], [1.69118086E12, 1160.3600000000006], [1.6911824E12, 4961.0], [1.69118052E12, 2182.45], [1.69118274E12, 2187.2799999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69118074E12, 1756.0], [1.69118236E12, 5609.0], [1.6911804E12, 1317.0], [1.6911827E12, 2097.0], [1.69118296E12, 550.0], [1.69118066E12, 2112.0], [1.69118228E12, 4053.5], [1.69118032E12, 711.5], [1.69118262E12, 3140.0], [1.69118288E12, 701.0], [1.691181E12, 535.0], [1.69118058E12, 2132.5], [1.6911822E12, 834.5], [1.69118024E12, 543.0], [1.69118254E12, 4558.0], [1.6911828E12, 1419.0], [1.69118092E12, 689.5], [1.6911805E12, 1759.0], [1.69118246E12, 5214.0], [1.69118272E12, 2080.0], [1.69118084E12, 1046.0], [1.69118268E12, 2822.5], [1.69118072E12, 1762.0], [1.69118046E12, 1465.0], [1.69118234E12, 4976.0], [1.69118098E12, 541.0], [1.6911826E12, 3116.5], [1.69118064E12, 2131.0], [1.69118294E12, 563.5], [1.69118038E12, 1047.5], [1.69118226E12, 3363.0], [1.6911809E12, 669.0], [1.69118252E12, 4498.0], [1.69118056E12, 2114.0], [1.69118286E12, 1041.0], [1.6911803E12, 680.0], [1.69118082E12, 1397.0], [1.69118244E12, 4518.5], [1.69118048E12, 1749.0], [1.69118278E12, 1398.0], [1.69118022E12, 565.0], [1.691183E12, 587.0], [1.69118078E12, 1404.5], [1.69118232E12, 4476.0], [1.69118044E12, 1403.5], [1.69118266E12, 2807.0], [1.69118292E12, 680.0], [1.69118096E12, 543.0], [1.6911807E12, 2116.5], [1.69118224E12, 3238.0], [1.69118036E12, 1037.5], [1.69118258E12, 3152.0], [1.69118284E12, 1043.0], [1.69118088E12, 1022.0], [1.69118062E12, 2121.0], [1.69118028E12, 656.5], [1.6911825E12, 4268.5], [1.69118276E12, 1404.5], [1.6911808E12, 1408.5], [1.69118054E12, 2108.0], [1.69118242E12, 4809.0], [1.69118042E12, 1407.5], [1.69118238E12, 5192.0], [1.69118264E12, 2796.0], [1.69118076E12, 1728.0], [1.69118298E12, 545.0], [1.69118034E12, 1013.0], [1.6911823E12, 4432.0], [1.69118256E12, 3502.5], [1.69118068E12, 2101.5], [1.6911829E12, 688.0], [1.69118026E12, 541.0], [1.69118222E12, 3125.5], [1.69118094E12, 633.0], [1.69118248E12, 5228.5], [1.6911806E12, 2103.0], [1.69118282E12, 1061.5], [1.69118086E12, 1049.0], [1.6911824E12, 4498.0], [1.69118052E12, 1798.0], [1.69118274E12, 2113.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.69118074E12, 1809.0], [1.69118236E12, 6767.0], [1.6911804E12, 1435.4], [1.6911827E12, 2798.1], [1.69118296E12, 633.1], [1.69118066E12, 2173.0], [1.69118228E12, 4319.5], [1.69118032E12, 914.1999999999998], [1.69118262E12, 3249.4], [1.69118288E12, 1052.4], [1.691181E12, 605.5999999999999], [1.69118058E12, 2260.0], [1.6911822E12, 1636.0], [1.69118024E12, 596.0], [1.69118254E12, 4628.0], [1.6911828E12, 1505.85], [1.69118092E12, 793.5999999999999], [1.6911805E12, 1802.5], [1.69118246E12, 5281.8], [1.69118272E12, 2127.0], [1.69118084E12, 1104.0], [1.69118268E12, 2922.35], [1.69118072E12, 1813.6], [1.69118046E12, 1781.5], [1.69118234E12, 5663.0], [1.69118098E12, 583.5999999999999], [1.6911826E12, 3177.7], [1.69118064E12, 2201.85], [1.69118294E12, 765.5], [1.69118038E12, 1097.3], [1.69118226E12, 3746.5], [1.6911809E12, 747.2], [1.69118252E12, 4576.0], [1.69118056E12, 2169.6], [1.69118286E12, 1108.0], [1.6911803E12, 787.5], [1.69118082E12, 1459.6], [1.69118244E12, 6011.9], [1.69118048E12, 1802.1999999999998], [1.69118278E12, 1453.0], [1.69118022E12, 1155.9999999999995], [1.691183E12, 708.2], [1.69118078E12, 1559.0], [1.69118232E12, 4656.3], [1.69118044E12, 1474.0], [1.69118266E12, 2876.7999999999997], [1.69118292E12, 747.15], [1.69118096E12, 580.85], [1.6911807E12, 2194.5499999999997], [1.69118224E12, 3907.0], [1.69118036E12, 1105.1], [1.69118258E12, 3647.3], [1.69118284E12, 1106.0], [1.69118088E12, 1119.0], [1.69118062E12, 2187.0], [1.69118028E12, 831.5], [1.6911825E12, 4651.05], [1.69118276E12, 2107.9], [1.6911808E12, 1517.0499999999995], [1.69118054E12, 2163.1], [1.69118242E12, 4978.9], [1.69118042E12, 1453.25], [1.69118238E12, 5748.6], [1.69118264E12, 3118.05], [1.69118076E12, 1845.75], [1.69118298E12, 614.5999999999995], [1.69118034E12, 1101.7], [1.6911823E12, 4726.3], [1.69118256E12, 4648.2], [1.69118068E12, 2227.75], [1.6911829E12, 822.1499999999999], [1.69118026E12, 568.0], [1.69118222E12, 4869.649999999999], [1.69118094E12, 796.5499999999996], [1.69118248E12, 5455.55], [1.6911806E12, 2152.8], [1.69118282E12, 1441.65], [1.69118086E12, 1121.4], [1.6911824E12, 4861.8], [1.69118052E12, 2160.0], [1.69118274E12, 2168.2]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 20000, "maxX": 1.691183E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 557.0, "minX": 1.0, "maxY": 4680.5, "series": [{"data": [[2.0, 4205.0], [8.0, 602.5], [9.0, 557.0], [10.0, 587.5], [11.0, 2784.0], [12.0, 2128.5], [3.0, 4468.0], [13.0, 1532.0], [14.0, 1435.0], [15.0, 1076.0], [4.0, 4680.5], [16.0, 685.0], [1.0, 3977.0], [17.0, 924.0], [5.0, 4541.0], [6.0, 4520.0], [7.0, 4512.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 17.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 557.0, "minX": 1.0, "maxY": 4680.5, "series": [{"data": [[2.0, 4204.5], [8.0, 601.5], [9.0, 557.0], [10.0, 587.0], [11.0, 2783.0], [12.0, 2128.5], [3.0, 4467.0], [13.0, 1532.0], [14.0, 1435.0], [15.0, 1076.0], [4.0, 4680.5], [16.0, 685.0], [1.0, 3977.0], [17.0, 924.0], [5.0, 4541.0], [6.0, 4520.0], [7.0, 4512.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 17.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.75, "minX": 1.69118022E12, "maxY": 14.8, "series": [{"data": [[1.69118074E12, 14.15], [1.69118236E12, 2.45], [1.6911804E12, 14.5], [1.6911827E12, 11.65], [1.69118296E12, 8.85], [1.69118066E12, 14.2], [1.69118228E12, 2.4], [1.69118032E12, 14.3], [1.69118262E12, 9.55], [1.69118288E12, 14.5], [1.691181E12, 5.1], [1.69118058E12, 14.0], [1.6911822E12, 0.75], [1.69118024E12, 9.15], [1.69118254E12, 6.7], [1.6911828E12, 14.1], [1.69118092E12, 14.8], [1.6911805E12, 14.2], [1.69118246E12, 4.85], [1.69118272E12, 12.05], [1.69118084E12, 14.35], [1.69118268E12, 10.6], [1.69118072E12, 14.15], [1.69118046E12, 14.5], [1.69118234E12, 2.95], [1.69118098E12, 9.15], [1.6911826E12, 9.6], [1.69118064E12, 14.1], [1.69118294E12, 9.45], [1.69118038E12, 14.3], [1.69118226E12, 1.7], [1.6911809E12, 14.75], [1.69118252E12, 6.7], [1.69118056E12, 14.15], [1.69118286E12, 14.4], [1.6911803E12, 14.2], [1.69118082E12, 13.8], [1.69118244E12, 4.3], [1.69118048E12, 14.35], [1.69118278E12, 14.25], [1.69118022E12, 6.0], [1.691183E12, 1.05], [1.69118078E12, 14.1], [1.69118232E12, 2.5], [1.69118044E12, 14.2], [1.69118266E12, 10.65], [1.69118292E12, 14.8], [1.69118096E12, 9.1], [1.6911807E12, 13.85], [1.69118224E12, 1.55], [1.69118036E12, 14.4], [1.69118258E12, 9.3], [1.69118284E12, 14.45], [1.69118088E12, 14.3], [1.69118062E12, 14.1], [1.69118028E12, 12.95], [1.6911825E12, 5.9], [1.69118276E12, 13.75], [1.6911808E12, 14.1], [1.69118054E12, 14.25], [1.69118242E12, 4.25], [1.69118042E12, 14.2], [1.69118238E12, 3.3], [1.69118264E12, 10.6], [1.69118076E12, 13.95], [1.69118298E12, 8.9], [1.69118034E12, 14.5], [1.6911823E12, 2.25], [1.69118256E12, 7.9], [1.69118068E12, 14.2], [1.6911829E12, 14.5], [1.69118026E12, 9.15], [1.69118222E12, 1.5], [1.69118094E12, 12.15], [1.69118248E12, 4.9], [1.6911806E12, 14.25], [1.69118282E12, 14.05], [1.69118086E12, 14.15], [1.6911824E12, 4.45], [1.69118052E12, 14.45], [1.69118274E12, 11.75]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 20000, "maxX": 1.691183E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.69118022E12, "maxY": 14.8, "series": [{"data": [[1.69118074E12, 14.15], [1.69118236E12, 2.45], [1.6911804E12, 14.25], [1.6911827E12, 11.9], [1.69118296E12, 8.85], [1.69118066E12, 14.2], [1.69118228E12, 2.4], [1.69118032E12, 14.3], [1.69118262E12, 9.55], [1.69118288E12, 14.75], [1.691181E12, 5.35], [1.69118058E12, 14.0], [1.6911822E12, 0.5], [1.69118024E12, 9.15], [1.69118254E12, 6.7], [1.6911828E12, 14.1], [1.69118092E12, 14.8], [1.6911805E12, 14.2], [1.69118246E12, 4.6], [1.69118272E12, 12.05], [1.69118084E12, 14.35], [1.69118268E12, 10.6], [1.69118072E12, 14.15], [1.69118046E12, 14.25], [1.69118234E12, 2.95], [1.69118098E12, 9.15], [1.6911826E12, 9.6], [1.69118064E12, 14.1], [1.69118294E12, 9.7], [1.69118038E12, 14.3], [1.69118226E12, 1.45], [1.6911809E12, 14.75], [1.69118252E12, 6.45], [1.69118056E12, 14.15], [1.69118286E12, 14.4], [1.6911803E12, 14.2], [1.69118082E12, 14.05], [1.69118244E12, 4.3], [1.69118048E12, 14.35], [1.69118278E12, 14.25], [1.69118022E12, 5.75], [1.691183E12, 1.3], [1.69118078E12, 14.1], [1.69118232E12, 2.25], [1.69118044E12, 14.2], [1.69118266E12, 10.65], [1.69118292E12, 14.8], [1.69118096E12, 9.1], [1.6911807E12, 14.1], [1.69118224E12, 1.55], [1.69118036E12, 14.4], [1.69118258E12, 9.3], [1.69118284E12, 14.45], [1.69118088E12, 14.55], [1.69118062E12, 14.1], [1.69118028E12, 12.7], [1.6911825E12, 5.9], [1.69118276E12, 14.0], [1.6911808E12, 14.1], [1.69118054E12, 14.25], [1.69118242E12, 4.25], [1.69118042E12, 14.2], [1.69118238E12, 3.15], [1.69118264E12, 10.6], [1.69118076E12, 14.2], [1.69118298E12, 8.9], [1.69118034E12, 14.25], [1.6911823E12, 2.25], [1.69118256E12, 7.9], [1.69118068E12, 14.2], [1.6911829E12, 14.5], [1.69118026E12, 9.15], [1.69118222E12, 1.5], [1.69118094E12, 12.4], [1.69118248E12, 4.9], [1.6911806E12, 14.25], [1.69118282E12, 14.3], [1.69118086E12, 14.15], [1.6911824E12, 4.35], [1.69118052E12, 14.2], [1.69118274E12, 11.75]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 20000, "maxX": 1.691183E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.69118022E12, "maxY": 14.8, "series": [{"data": [[1.69118074E12, 14.15], [1.69118236E12, 2.45], [1.6911804E12, 14.25], [1.6911827E12, 11.9], [1.69118296E12, 8.85], [1.69118066E12, 14.2], [1.69118228E12, 2.4], [1.69118032E12, 14.3], [1.69118262E12, 9.55], [1.69118288E12, 14.75], [1.691181E12, 5.35], [1.69118058E12, 14.0], [1.6911822E12, 0.5], [1.69118024E12, 9.15], [1.69118254E12, 6.7], [1.6911828E12, 14.1], [1.69118092E12, 14.8], [1.6911805E12, 14.2], [1.69118246E12, 4.6], [1.69118272E12, 12.05], [1.69118084E12, 14.35], [1.69118268E12, 10.6], [1.69118072E12, 14.15], [1.69118046E12, 14.25], [1.69118234E12, 2.95], [1.69118098E12, 9.15], [1.6911826E12, 9.6], [1.69118064E12, 14.1], [1.69118294E12, 9.7], [1.69118038E12, 14.3], [1.69118226E12, 1.45], [1.6911809E12, 14.75], [1.69118252E12, 6.45], [1.69118056E12, 14.15], [1.69118286E12, 14.4], [1.6911803E12, 14.2], [1.69118082E12, 14.05], [1.69118244E12, 4.3], [1.69118048E12, 14.35], [1.69118278E12, 14.25], [1.69118022E12, 5.75], [1.691183E12, 1.3], [1.69118078E12, 14.1], [1.69118232E12, 2.25], [1.69118044E12, 14.2], [1.69118266E12, 10.65], [1.69118292E12, 14.8], [1.69118096E12, 9.1], [1.6911807E12, 14.1], [1.69118224E12, 1.55], [1.69118036E12, 14.4], [1.69118258E12, 9.3], [1.69118284E12, 14.45], [1.69118088E12, 14.55], [1.69118062E12, 14.1], [1.69118028E12, 12.7], [1.6911825E12, 5.9], [1.69118276E12, 14.0], [1.6911808E12, 14.1], [1.69118054E12, 14.25], [1.69118242E12, 4.25], [1.69118042E12, 14.2], [1.69118238E12, 3.15], [1.69118264E12, 10.6], [1.69118076E12, 14.2], [1.69118298E12, 8.9], [1.69118034E12, 14.25], [1.6911823E12, 2.25], [1.69118256E12, 7.9], [1.69118068E12, 14.2], [1.6911829E12, 14.5], [1.69118026E12, 9.15], [1.69118222E12, 1.5], [1.69118094E12, 12.4], [1.69118248E12, 4.9], [1.6911806E12, 14.25], [1.69118282E12, 14.3], [1.69118086E12, 14.15], [1.6911824E12, 4.35], [1.69118052E12, 14.2], [1.69118274E12, 11.75]], "isOverall": false, "label": "Get Search-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 20000, "maxX": 1.691183E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.69118022E12, "maxY": 14.8, "series": [{"data": [[1.69118074E12, 14.15], [1.69118236E12, 2.45], [1.6911804E12, 14.25], [1.6911827E12, 11.9], [1.69118296E12, 8.85], [1.69118066E12, 14.2], [1.69118228E12, 2.4], [1.69118032E12, 14.3], [1.69118262E12, 9.55], [1.69118288E12, 14.75], [1.691181E12, 5.35], [1.69118058E12, 14.0], [1.6911822E12, 0.5], [1.69118024E12, 9.15], [1.69118254E12, 6.7], [1.6911828E12, 14.1], [1.69118092E12, 14.8], [1.6911805E12, 14.2], [1.69118246E12, 4.6], [1.69118272E12, 12.05], [1.69118084E12, 14.35], [1.69118268E12, 10.6], [1.69118072E12, 14.15], [1.69118046E12, 14.25], [1.69118234E12, 2.95], [1.69118098E12, 9.15], [1.6911826E12, 9.6], [1.69118064E12, 14.1], [1.69118294E12, 9.7], [1.69118038E12, 14.3], [1.69118226E12, 1.45], [1.6911809E12, 14.75], [1.69118252E12, 6.45], [1.69118056E12, 14.15], [1.69118286E12, 14.4], [1.6911803E12, 14.2], [1.69118082E12, 14.05], [1.69118244E12, 4.3], [1.69118048E12, 14.35], [1.69118278E12, 14.25], [1.69118022E12, 5.75], [1.691183E12, 1.3], [1.69118078E12, 14.1], [1.69118232E12, 2.25], [1.69118044E12, 14.2], [1.69118266E12, 10.65], [1.69118292E12, 14.8], [1.69118096E12, 9.1], [1.6911807E12, 14.1], [1.69118224E12, 1.55], [1.69118036E12, 14.4], [1.69118258E12, 9.3], [1.69118284E12, 14.45], [1.69118088E12, 14.55], [1.69118062E12, 14.1], [1.69118028E12, 12.7], [1.6911825E12, 5.9], [1.69118276E12, 14.0], [1.6911808E12, 14.1], [1.69118054E12, 14.25], [1.69118242E12, 4.25], [1.69118042E12, 14.2], [1.69118238E12, 3.15], [1.69118264E12, 10.6], [1.69118076E12, 14.2], [1.69118298E12, 8.9], [1.69118034E12, 14.25], [1.6911823E12, 2.25], [1.69118256E12, 7.9], [1.69118068E12, 14.2], [1.6911829E12, 14.5], [1.69118026E12, 9.15], [1.69118222E12, 1.5], [1.69118094E12, 12.4], [1.69118248E12, 4.9], [1.6911806E12, 14.25], [1.69118282E12, 14.3], [1.69118086E12, 14.15], [1.6911824E12, 4.35], [1.69118052E12, 14.2], [1.69118274E12, 11.75]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 20000, "maxX": 1.691183E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

